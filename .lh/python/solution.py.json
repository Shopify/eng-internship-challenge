{
    "sourceFile": "python/solution.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 138,
            "patches": [
                {
                    "date": 1719521097872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1719521224444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,6 +7,7 @@\n     ['L','M','N','O','Q'],\r\n     ['T','V','W','X','Z']\r\n ]\r\n \r\n-for digraph in range(0, len(message), 2):\r\n+for digraphPoint in range(0, len(message), 2):\r\n+    digraph = message[digraphPoint] + message[digraphPoint+1]\r\n     print(digraph)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719521734532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,7 +7,8 @@\n     ['L','M','N','O','Q'],\r\n     ['T','V','W','X','Z']\r\n ]\r\n \r\n-for digraphPoint in range(0, len(message), 2):\r\n-    digraph = message[digraphPoint] + message[digraphPoint+1]\r\n+for digraph_point in range(0, len(message), 2):\r\n+    digraph = message[digraph_point] + message[digraph_point+1]\r\n+    decrypted_digraph = grid[grid.index(message[digraph_point])-1] + grid[grid.index(message[digraph_point+1])-1]\r\n     print(digraph)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719521756440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,5 +10,5 @@\n \r\n for digraph_point in range(0, len(message), 2):\r\n     digraph = message[digraph_point] + message[digraph_point+1]\r\n     decrypted_digraph = grid[grid.index(message[digraph_point])-1] + grid[grid.index(message[digraph_point+1])-1]\r\n-    print(digraph)\n\\ No newline at end of file\n+    print(decrypted_digraph)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719521777720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,6 +9,6 @@\n ]\r\n \r\n for digraph_point in range(0, len(message), 2):\r\n     digraph = message[digraph_point] + message[digraph_point+1]\r\n-    decrypted_digraph = grid[grid.index(message[digraph_point])-1] + grid[grid.index(message[digraph_point+1])-1]\r\n+    decrypted_digraph = grid[grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n     print(decrypted_digraph)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719521840643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,6 +9,8 @@\n ]\r\n \r\n for digraph_point in range(0, len(message), 2):\r\n     digraph = message[digraph_point] + message[digraph_point+1]\r\n+    print(message[digraph_point])\r\n+    print(grid.index(message[digraph_point]))\r\n     decrypted_digraph = grid[grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n     print(decrypted_digraph)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719522436662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,13 @@\n     ['T','V','W','X','Z']\r\n ]\r\n \r\n for digraph_point in range(0, len(message), 2):\r\n-    digraph = message[digraph_point] + message[digraph_point+1]\r\n-    print(message[digraph_point])\r\n-    print(grid.index(message[digraph_point]))\r\n-    decrypted_digraph = grid[grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n-    print(decrypted_digraph)\n\\ No newline at end of file\n+    char1 = message[digraph_point]\r\n+    char2 = message[digraph_point+1]\r\n+    digraph = char1 + char2\r\n+    print(digraph)\r\n+    # decrypted_digraph = grid[grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n+    # print(decrypted_digraph)\r\n+    # If same row:\r\n+    # If same column:\r\n+    # Else rectangle:\r\n"
                },
                {
                    "date": 1719522685585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,26 @@\n+message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+\r\n+grid = [\r\n+    ['S','U','P','E','R'],\r\n+    ['Y','A','B','C','D'],\r\n+    ['F','G','H','I','K'],\r\n+    ['L','M','N','O','Q'],\r\n+    ['T','V','W','X','Z']\r\n+]\r\n+\r\n+decrypted = \"\"\r\n+\r\n+for digraph_point in range(0, len(message), 2):\r\n+    letter1 = message[digraph_point]\r\n+    letter2 = message[digraph_point+1]\r\n+\r\n+    digraph = letter1 + letter2\r\n+    print(digraph)\r\n+    # decrypted_digraph = grid[grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n+    # print(decrypted_digraph)\r\n+    # If same row:\r\n+    for row in grid:\r\n+        if row.index(message[digraph_point]) or row.index(message[digraph_point+1]):\r\n+            print(row.index(message[digraph_point]) or row.index(message[digraph_point+1]))\r\n+    # If same column:\r\n+    # Else rectangle:\r\n"
                },
                {
                    "date": 1719523096780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,14 @@\n ]\r\n \r\n decrypted = \"\"\r\n \r\n+def index_of(value, in_list):\r\n+    try:\r\n+        return in_list.index(value)\r\n+    except ValueError:\r\n+        return None\r\n+\r\n for digraph_point in range(0, len(message), 2):\r\n     letter1 = message[digraph_point]\r\n     letter2 = message[digraph_point+1]\r\n \r\n@@ -19,28 +25,11 @@\n     # decrypted_digraph = grid[grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n     # print(decrypted_digraph)\r\n     # If same row:\r\n     for row in grid:\r\n-        if row.index(message[digraph_point]) or row.index(message[digraph_point+1]):\r\n+        # Same row:\r\n+        if message[digraph_point] in row and message[digraph_point+1] in row:\r\n+            print(\"Same row\")\r\n+        if message[digraph_point] in row or message[digraph_point+1] in row:\r\n             print(row.index(message[digraph_point]) or row.index(message[digraph_point+1]))\r\n     # If same column:\r\n     # Else rectangle:\r\n-message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-\r\n-grid = [\r\n-    ['S','U','P','E','R'],\r\n-    ['Y','A','B','C','D'],\r\n-    ['F','G','H','I','K'],\r\n-    ['L','M','N','O','Q'],\r\n-    ['T','V','W','X','Z']\r\n-]\r\n-\r\n-for digraph_point in range(0, len(message), 2):\r\n-    char1 = message[digraph_point]\r\n-    char2 = message[digraph_point+1]\r\n-    digraph = char1 + char2\r\n-    print(digraph)\r\n-    # decrypted_digraph = grid[grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n-    # print(decrypted_digraph)\r\n-    # If same row:\r\n-    # If same column:\r\n-    # Else rectangle:\r\n"
                },
                {
                    "date": 1719523166702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,7 +29,8 @@\n         # Same row:\r\n         if message[digraph_point] in row and message[digraph_point+1] in row:\r\n             print(\"Same row\")\r\n         if message[digraph_point] in row or message[digraph_point+1] in row:\r\n-            print(row.index(message[digraph_point]) or row.index(message[digraph_point+1]))\r\n+            print(index_of(message[digraph_point]) or index_of(message[digraph_point+1]))\r\n+            # print(row.index(message[digraph_point]) or row.index(message[digraph_point+1]))\r\n     # If same column:\r\n     # Else rectangle:\r\n"
                },
                {
                    "date": 1719523188134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,36 @@\n+message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+\r\n+grid = [\r\n+    ['S','U','P','E','R'],\r\n+    ['Y','A','B','C','D'],\r\n+    ['F','G','H','I','K'],\r\n+    ['L','M','N','O','Q'],\r\n+    ['T','V','W','X','Z']\r\n+]\r\n+\r\n+decrypted = \"\"\r\n+\r\n+def index_of(value, in_list):\r\n+    try:\r\n+        return in_list.index(value)\r\n+    except ValueError:\r\n+        return None\r\n+\r\n+for digraph_point in range(0, len(message), 2):\r\n+    letter1 = message[digraph_point]\r\n+    letter2 = message[digraph_point+1]\r\n+\r\n+    digraph = letter1 + letter2\r\n+    print(digraph)\r\n+    # decrypted_digraph = grid[grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n+    # print(decrypted_digraph)\r\n+    # If same row:\r\n+    for row in grid:\r\n+        # Same row:\r\n+        if message[digraph_point] in row and message[digraph_point+1] in row:\r\n+            print(\"Same row\")\r\n+        if message[digraph_point] in row or message[digraph_point+1] in row:\r\n+            print(index_of(message[digraph_point], row) or index_of(message[digraph_point+1], row))\r\n+            # print(row.index(message[digraph_point]) or row.index(message[digraph_point+1]))\r\n+    # If same column:\r\n+    # Else rectangle:\r\n"
                },
                {
                    "date": 1719523239910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,9 @@\n     for row in grid:\r\n         # Same row:\r\n         if message[digraph_point] in row and message[digraph_point+1] in row:\r\n             print(\"Same row\")\r\n+            continue\r\n         if message[digraph_point] in row or message[digraph_point+1] in row:\r\n             print(index_of(message[digraph_point], row) or index_of(message[digraph_point+1], row))\r\n             # print(row.index(message[digraph_point]) or row.index(message[digraph_point+1]))\r\n     # If same column:\r\n"
                },
                {
                    "date": 1719523435816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,48 +26,12 @@\n     # print(decrypted_digraph)\r\n     # If same row:\r\n     for row in grid:\r\n         # Same row:\r\n-        if message[digraph_point] in row and message[digraph_point+1] in row:\r\n+        if letter1 in row and letter2 in row:\r\n             print(\"Same row\")\r\n             continue\r\n-        if message[digraph_point] in row or message[digraph_point+1] in row:\r\n+        if letter1 in row or letter2 in row:\r\n             print(index_of(message[digraph_point], row) or index_of(message[digraph_point+1], row))\r\n             # print(row.index(message[digraph_point]) or row.index(message[digraph_point+1]))\r\n     # If same column:\r\n     # Else rectangle:\r\n-message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-\r\n-grid = [\r\n-    ['S','U','P','E','R'],\r\n-    ['Y','A','B','C','D'],\r\n-    ['F','G','H','I','K'],\r\n-    ['L','M','N','O','Q'],\r\n-    ['T','V','W','X','Z']\r\n-]\r\n-\r\n-decrypted = \"\"\r\n-\r\n-def index_of(value, in_list):\r\n-    try:\r\n-        return in_list.index(value)\r\n-    except ValueError:\r\n-        return None\r\n-\r\n-for digraph_point in range(0, len(message), 2):\r\n-    letter1 = message[digraph_point]\r\n-    letter2 = message[digraph_point+1]\r\n-\r\n-    digraph = letter1 + letter2\r\n-    print(digraph)\r\n-    # decrypted_digraph = grid[grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n-    # print(decrypted_digraph)\r\n-    # If same row:\r\n-    for row in grid:\r\n-        # Same row:\r\n-        if message[digraph_point] in row and message[digraph_point+1] in row:\r\n-            print(\"Same row\")\r\n-        if message[digraph_point] in row or message[digraph_point+1] in row:\r\n-            print(index_of(message[digraph_point]) or index_of(message[digraph_point+1]))\r\n-            # print(row.index(message[digraph_point]) or row.index(message[digraph_point+1]))\r\n-    # If same column:\r\n-    # Else rectangle:\r\n"
                },
                {
                    "date": 1719523451252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,8 @@\n         if letter1 in row and letter2 in row:\r\n             print(\"Same row\")\r\n             continue\r\n         if letter1 in row or letter2 in row:\r\n-            print(index_of(message[digraph_point], row) or index_of(message[digraph_point+1], row))\r\n+            print(index_of(letter1, row) or index_of(letter2, row))\r\n             # print(row.index(message[digraph_point]) or row.index(message[digraph_point+1]))\r\n     # If same column:\r\n     # Else rectangle:\r\n"
                },
                {
                    "date": 1719523508323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n         # Same row:\r\n         if letter1 in row and letter2 in row:\r\n             print(\"Same row\")\r\n             continue\r\n-        if letter1 in row or letter2 in row:\r\n+        elif letter1 in row or letter2 in row:\r\n             print(index_of(letter1, row) or index_of(letter2, row))\r\n             # print(row.index(message[digraph_point]) or row.index(message[digraph_point+1]))\r\n     # If same column:\r\n     # Else rectangle:\r\n"
                },
                {
                    "date": 1719523564009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,8 @@\n         if letter1 in row and letter2 in row:\r\n             print(\"Same row\")\r\n             continue\r\n         elif letter1 in row or letter2 in row:\r\n-            print(index_of(letter1, row) or index_of(letter2, row))\r\n+            print((index_of(letter1, row) or index_of(letter2, row)), letter1 or letter2, row)\r\n             # print(row.index(message[digraph_point]) or row.index(message[digraph_point+1]))\r\n     # If same column:\r\n     # Else rectangle:\r\n"
                },
                {
                    "date": 1719524118866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,13 @@\n for digraph_point in range(0, len(message), 2):\r\n     letter1 = message[digraph_point]\r\n     letter2 = message[digraph_point+1]\r\n \r\n+    letter1_col = -1\r\n+    letter1_row = -1\r\n+    letter2_col = -1\r\n+    letter2_row = -1\r\n+\r\n     digraph = letter1 + letter2\r\n     print(digraph)\r\n     # decrypted_digraph = grid[grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n     # print(decrypted_digraph)\r\n@@ -29,9 +34,12 @@\n         # Same row:\r\n         if letter1 in row and letter2 in row:\r\n             print(\"Same row\")\r\n             continue\r\n-        elif letter1 in row or letter2 in row:\r\n-            print((index_of(letter1, row) or index_of(letter2, row)), letter1 or letter2, row)\r\n+        elif letter1 in row and letter1_col < 0:\r\n+            letter1_col = row.index(letter1)\r\n+            letter1_row = grid.index(row)\r\n+            print(\"Column:\", letter1_col, \"Row:\", letter1_row)\r\n+            # print((index_of(letter1, row) or index_of(letter2, row)), letter1 or letter2, row)\r\n             # print(row.index(message[digraph_point]) or row.index(message[digraph_point+1]))\r\n     # If same column:\r\n     # Else rectangle:\r\n"
                },
                {
                    "date": 1719524196733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+\r\n+grid = [\r\n+    ['S','U','P','E','R'],\r\n+    ['Y','A','B','C','D'],\r\n+    ['F','G','H','I','K'],\r\n+    ['L','M','N','O','Q'],\r\n+    ['T','V','W','X','Z']\r\n+]\r\n+\r\n+decrypted = \"\"\r\n+\r\n+def index_of(value, in_list):\r\n+    try:\r\n+        return in_list.index(value)\r\n+    except ValueError:\r\n+        return None\r\n+\r\n+for digraph_point in range(0, len(message), 2):\r\n+    letter1 = message[digraph_point]\r\n+    letter2 = message[digraph_point+1]\r\n+\r\n+    letter1_col = -1\r\n+    letter1_row = -1\r\n+    letter2_col = -1\r\n+    letter2_row = -1\r\n+\r\n+    digraph = letter1 + letter2\r\n+    print(digraph)\r\n+    # decrypted_digraph = grid[grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n+    # print(decrypted_digraph)\r\n+    # If same row:\r\n+    for row in grid:\r\n+        # Same row:\r\n+        if letter1 in row and letter2 in row:\r\n+            print(\"Same row\")\r\n+            continue\r\n+        if letter1 in row and letter1_col < 0:\r\n+            letter1_col = row.index(letter1)\r\n+            letter1_row = grid.index(row)\r\n+            print(\"Column:\", letter1_col, \"Row:\", letter1_row)\r\n+            # print((index_of(letter1, row) or index_of(letter2, row)), letter1 or letter2, row)\r\n+            # print(row.index(message[digraph_point]) or row.index(message[digraph_point+1]))\r\n+        if letter2 in row and letter2_col < 0:\r\n+            letter2_col = row.index(letter2)\r\n+            letter2_row = grid.index(row)\r\n+            print(\"Column:\", letter2_col, \"Row:\", letter2_row)\r\n+    # If same column:\r\n+    # Else rectangle:\r\n"
                },
                {
                    "date": 1719524309210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,49 @@\n+message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+\r\n+grid = [\r\n+    ['S','U','P','E','R'],\r\n+    ['Y','A','B','C','D'],\r\n+    ['F','G','H','I','K'],\r\n+    ['L','M','N','O','Q'],\r\n+    ['T','V','W','X','Z']\r\n+]\r\n+\r\n+decrypted = \"\"\r\n+\r\n+def index_of(value, in_list):\r\n+    try:\r\n+        return in_list.index(value)\r\n+    except ValueError:\r\n+        return None\r\n+\r\n+for digraph_point in range(0, len(message), 2):\r\n+    letter1 = message[digraph_point]\r\n+    letter2 = message[digraph_point+1]\r\n+\r\n+    letter1_row = -1\r\n+    letter1_col = -1\r\n+    letter2_row = -1\r\n+    letter2_col = -1\r\n+\r\n+    digraph = letter1 + letter2\r\n+    print(digraph)\r\n+    # decrypted_digraph = grid[grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n+    # print(decrypted_digraph)\r\n+    # If same row:\r\n+    for row in grid:\r\n+        # Same row:\r\n+        if letter1 in row and letter2 in row:\r\n+            print(\"Same row\")\r\n+            continue\r\n+        if letter1 in row and letter1_col < 0:\r\n+            letter1_row = grid.index(row)\r\n+            letter1_col = row.index(letter1)\r\n+            print(\"Row:\", letter1_row, \"Column:\", letter1_col)\r\n+            # print((index_of(letter1, row) or index_of(letter2, row)), letter1 or letter2, row)\r\n+            # print(row.index(message[digraph_point]) or row.index(message[digraph_point+1]))\r\n+        if letter2 in row and letter2_col < 0:\r\n+            letter2_row = grid.index(row)\r\n+            letter2_col = row.index(letter2)\r\n+            print(\"Row:\", letter2_row, \"Column:\", letter2_col)\r\n+    # If same column:\r\n+    # Else rectangle:\r\n"
                },
                {
                    "date": 1719524503611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,114 +30,22 @@\n     # decrypted_digraph = grid[grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n     # print(decrypted_digraph)\r\n     # If same row:\r\n     for row in grid:\r\n-        # Same row:\r\n+        # Early exit for same row:\r\n         if letter1 in row and letter2 in row:\r\n             print(\"Same row\")\r\n             continue\r\n+\r\n         if letter1 in row and letter1_col < 0:\r\n             letter1_row = grid.index(row)\r\n             letter1_col = row.index(letter1)\r\n             print(\"Row:\", letter1_row, \"Column:\", letter1_col)\r\n-            # print((index_of(letter1, row) or index_of(letter2, row)), letter1 or letter2, row)\r\n-            # print(row.index(message[digraph_point]) or row.index(message[digraph_point+1]))\r\n         if letter2 in row and letter2_col < 0:\r\n             letter2_row = grid.index(row)\r\n             letter2_col = row.index(letter2)\r\n             print(\"Row:\", letter2_row, \"Column:\", letter2_col)\r\n-    # If same column:\r\n-    # Else rectangle:\r\n-message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n \r\n-grid = [\r\n-    ['S','U','P','E','R'],\r\n-    ['Y','A','B','C','D'],\r\n-    ['F','G','H','I','K'],\r\n-    ['L','M','N','O','Q'],\r\n-    ['T','V','W','X','Z']\r\n-]\r\n-\r\n-decrypted = \"\"\r\n-\r\n-def index_of(value, in_list):\r\n-    try:\r\n-        return in_list.index(value)\r\n-    except ValueError:\r\n-        return None\r\n-\r\n-for digraph_point in range(0, len(message), 2):\r\n-    letter1 = message[digraph_point]\r\n-    letter2 = message[digraph_point+1]\r\n-\r\n-    letter1_col = -1\r\n-    letter1_row = -1\r\n-    letter2_col = -1\r\n-    letter2_row = -1\r\n-\r\n-    digraph = letter1 + letter2\r\n-    print(digraph)\r\n-    # decrypted_digraph = grid[grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n-    # print(decrypted_digraph)\r\n-    # If same row:\r\n-    for row in grid:\r\n-        # Same row:\r\n-        if letter1 in row and letter2 in row:\r\n-            print(\"Same row\")\r\n-            continue\r\n-        if letter1 in row and letter1_col < 0:\r\n-            letter1_col = row.index(letter1)\r\n-            letter1_row = grid.index(row)\r\n-            print(\"Column:\", letter1_col, \"Row:\", letter1_row)\r\n-            # print((index_of(letter1, row) or index_of(letter2, row)), letter1 or letter2, row)\r\n-            # print(row.index(message[digraph_point]) or row.index(message[digraph_point+1]))\r\n-        if letter2 in row and letter2_col < 0:\r\n-            letter2_col = row.index(letter2)\r\n-            letter2_row = grid.index(row)\r\n-            print(\"Column:\", letter2_col, \"Row:\", letter2_row)\r\n+        if letter1_col == letter2_col:\r\n+            print(\"Same column\")\r\n     # If same column:\r\n     # Else rectangle:\r\n-message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-\r\n-grid = [\r\n-    ['S','U','P','E','R'],\r\n-    ['Y','A','B','C','D'],\r\n-    ['F','G','H','I','K'],\r\n-    ['L','M','N','O','Q'],\r\n-    ['T','V','W','X','Z']\r\n-]\r\n-\r\n-decrypted = \"\"\r\n-\r\n-def index_of(value, in_list):\r\n-    try:\r\n-        return in_list.index(value)\r\n-    except ValueError:\r\n-        return None\r\n-\r\n-for digraph_point in range(0, len(message), 2):\r\n-    letter1 = message[digraph_point]\r\n-    letter2 = message[digraph_point+1]\r\n-\r\n-    letter1_col = -1\r\n-    letter1_row = -1\r\n-    letter2_col = -1\r\n-    letter2_row = -1\r\n-\r\n-    digraph = letter1 + letter2\r\n-    print(digraph)\r\n-    # decrypted_digraph = grid[grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n-    # print(decrypted_digraph)\r\n-    # If same row:\r\n-    for row in grid:\r\n-        # Same row:\r\n-        if letter1 in row and letter2 in row:\r\n-            print(\"Same row\")\r\n-            continue\r\n-        elif letter1 in row and letter1_col < 0:\r\n-            letter1_col = row.index(letter1)\r\n-            letter1_row = grid.index(row)\r\n-            print(\"Column:\", letter1_col, \"Row:\", letter1_row)\r\n-            # print((index_of(letter1, row) or index_of(letter2, row)), letter1 or letter2, row)\r\n-            # print(row.index(message[digraph_point]) or row.index(message[digraph_point+1]))\r\n-    # If same column:\r\n-    # Else rectangle:\r\n"
                },
                {
                    "date": 1719524521677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+message = \"IOEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n \r\n grid = [\r\n     ['S','U','P','E','R'],\r\n     ['Y','A','B','C','D'],\r\n"
                },
                {
                    "date": 1719524553083,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,6 +46,7 @@\n             print(\"Row:\", letter2_row, \"Column:\", letter2_col)\r\n \r\n         if letter1_col == letter2_col:\r\n             print(\"Same column\")\r\n+            continue\r\n     # If same column:\r\n     # Else rectangle:\r\n"
                },
                {
                    "date": 1719524559691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,7 +46,6 @@\n             print(\"Row:\", letter2_row, \"Column:\", letter2_col)\r\n \r\n         if letter1_col == letter2_col:\r\n             print(\"Same column\")\r\n-            continue\r\n     # If same column:\r\n     # Else rectangle:\r\n"
                },
                {
                    "date": 1719524600808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,51 @@\n+message = \"IOEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+\r\n+grid = [\r\n+    ['S','U','P','E','R'],\r\n+    ['Y','A','B','C','D'],\r\n+    ['F','G','H','I','K'],\r\n+    ['L','M','N','O','Q'],\r\n+    ['T','V','W','X','Z']\r\n+]\r\n+\r\n+decrypted = \"\"\r\n+\r\n+def index_of(value, in_list):\r\n+    try:\r\n+        return in_list.index(value)\r\n+    except ValueError:\r\n+        return None\r\n+\r\n+for digraph_point in range(0, len(message), 2):\r\n+    letter1 = message[digraph_point]\r\n+    letter2 = message[digraph_point+1]\r\n+\r\n+    letter1_row = -1\r\n+    letter1_col = -1\r\n+    letter2_row = -1\r\n+    letter2_col = -1\r\n+\r\n+    digraph = letter1 + letter2\r\n+    print(digraph)\r\n+    # decrypted_digraph = grid[grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n+    # print(decrypted_digraph)\r\n+    # If same row:\r\n+    for row in grid:\r\n+        # Early exit for same row:\r\n+        if letter1 in row and letter2 in row:\r\n+            print(\"Same row\")\r\n+            continue\r\n+\r\n+        if letter1 in row and letter1_col < 0:\r\n+            letter1_row = grid.index(row)\r\n+            letter1_col = row.index(letter1)\r\n+            print(\"Row:\", letter1_row, \"Column:\", letter1_col)\r\n+        if letter2 in row and letter2_col < 0:\r\n+            letter2_row = grid.index(row)\r\n+            letter2_col = row.index(letter2)\r\n+            print(\"Row:\", letter2_row, \"Column:\", letter2_col)\r\n+\r\n+    if letter1_col == letter2_col:\r\n+        print(\"Same column\")\r\n+    # If same column:\r\n+    # Else rectangle:\r\n"
                },
                {
                    "date": 1719524665466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n     for row in grid:\r\n         # Early exit for same row:\r\n         if letter1 in row and letter2 in row:\r\n             print(\"Same row\")\r\n-            continue\r\n+            break\r\n \r\n         if letter1 in row and letter1_col < 0:\r\n             letter1_row = grid.index(row)\r\n             letter1_col = row.index(letter1)\r\n@@ -48,55 +48,4 @@\n     if letter1_col == letter2_col:\r\n         print(\"Same column\")\r\n     # If same column:\r\n     # Else rectangle:\r\n-message = \"IOEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-\r\n-grid = [\r\n-    ['S','U','P','E','R'],\r\n-    ['Y','A','B','C','D'],\r\n-    ['F','G','H','I','K'],\r\n-    ['L','M','N','O','Q'],\r\n-    ['T','V','W','X','Z']\r\n-]\r\n-\r\n-decrypted = \"\"\r\n-\r\n-def index_of(value, in_list):\r\n-    try:\r\n-        return in_list.index(value)\r\n-    except ValueError:\r\n-        return None\r\n-\r\n-for digraph_point in range(0, len(message), 2):\r\n-    letter1 = message[digraph_point]\r\n-    letter2 = message[digraph_point+1]\r\n-\r\n-    letter1_row = -1\r\n-    letter1_col = -1\r\n-    letter2_row = -1\r\n-    letter2_col = -1\r\n-\r\n-    digraph = letter1 + letter2\r\n-    print(digraph)\r\n-    # decrypted_digraph = grid[grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n-    # print(decrypted_digraph)\r\n-    # If same row:\r\n-    for row in grid:\r\n-        # Early exit for same row:\r\n-        if letter1 in row and letter2 in row:\r\n-            print(\"Same row\")\r\n-            continue\r\n-\r\n-        if letter1 in row and letter1_col < 0:\r\n-            letter1_row = grid.index(row)\r\n-            letter1_col = row.index(letter1)\r\n-            print(\"Row:\", letter1_row, \"Column:\", letter1_col)\r\n-        if letter2 in row and letter2_col < 0:\r\n-            letter2_row = grid.index(row)\r\n-            letter2_col = row.index(letter2)\r\n-            print(\"Row:\", letter2_row, \"Column:\", letter2_col)\r\n-\r\n-        if letter1_col == letter2_col:\r\n-            print(\"Same column\")\r\n-    # If same column:\r\n-    # Else rectangle:\r\n"
                },
                {
                    "date": 1719524699533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,19 +33,19 @@\n     for row in grid:\r\n         # Early exit for same row:\r\n         if letter1 in row and letter2 in row:\r\n             print(\"Same row\")\r\n-            break\r\n+            continue\r\n+        else:\r\n+            if letter1 in row and letter1_col < 0:\r\n+                letter1_row = grid.index(row)\r\n+                letter1_col = row.index(letter1)\r\n+                print(\"Row:\", letter1_row, \"Column:\", letter1_col)\r\n+            if letter2 in row and letter2_col < 0:\r\n+                letter2_row = grid.index(row)\r\n+                letter2_col = row.index(letter2)\r\n+                print(\"Row:\", letter2_row, \"Column:\", letter2_col)\r\n \r\n-        if letter1 in row and letter1_col < 0:\r\n-            letter1_row = grid.index(row)\r\n-            letter1_col = row.index(letter1)\r\n-            print(\"Row:\", letter1_row, \"Column:\", letter1_col)\r\n-        if letter2 in row and letter2_col < 0:\r\n-            letter2_row = grid.index(row)\r\n-            letter2_col = row.index(letter2)\r\n-            print(\"Row:\", letter2_row, \"Column:\", letter2_col)\r\n-\r\n     if letter1_col == letter2_col:\r\n         print(\"Same column\")\r\n     # If same column:\r\n     # Else rectangle:\r\n"
                },
                {
                    "date": 1719524787732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,7 +45,7 @@\n                 letter2_col = row.index(letter2)\r\n                 print(\"Row:\", letter2_row, \"Column:\", letter2_col)\r\n \r\n     if letter1_col == letter2_col:\r\n-        print(\"Same column\")\r\n+        print(\"Same column, 1:\", letter1_col, \", 2:\", letter2_col)\r\n     # If same column:\r\n     # Else rectangle:\r\n"
                },
                {
                    "date": 1719524899752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,8 @@\n                 letter2_row = grid.index(row)\r\n                 letter2_col = row.index(letter2)\r\n                 print(\"Row:\", letter2_row, \"Column:\", letter2_col)\r\n \r\n-    if letter1_col == letter2_col:\r\n+    if letter1_col == letter2_col and letter1_col > 0:\r\n         print(\"Same column, 1:\", letter1_col, \", 2:\", letter2_col)\r\n     # If same column:\r\n     # Else rectangle:\r\n"
                },
                {
                    "date": 1719524923845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,51 @@\n+message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+\r\n+grid = [\r\n+    ['S','U','P','E','R'],\r\n+    ['Y','A','B','C','D'],\r\n+    ['F','G','H','I','K'],\r\n+    ['L','M','N','O','Q'],\r\n+    ['T','V','W','X','Z']\r\n+]\r\n+\r\n+decrypted = \"\"\r\n+\r\n+def index_of(value, in_list):\r\n+    try:\r\n+        return in_list.index(value)\r\n+    except ValueError:\r\n+        return None\r\n+\r\n+for digraph_point in range(0, len(message), 2):\r\n+    letter1 = message[digraph_point]\r\n+    letter2 = message[digraph_point+1]\r\n+\r\n+    letter1_row = -1\r\n+    letter1_col = -1\r\n+    letter2_row = -1\r\n+    letter2_col = -1\r\n+\r\n+    digraph = letter1 + letter2\r\n+    print(digraph)\r\n+    # decrypted_digraph = grid[grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n+    # print(decrypted_digraph)\r\n+    # If same row:\r\n+    for row in grid:\r\n+        # Early exit for same row:\r\n+        if letter1 in row and letter2 in row:\r\n+            print(\"Same row\")\r\n+            continue\r\n+        else:\r\n+            if letter1 in row and letter1_col < 0:\r\n+                letter1_row = grid.index(row)\r\n+                letter1_col = row.index(letter1)\r\n+                print(\"Row:\", letter1_row, \"Column:\", letter1_col)\r\n+            if letter2 in row and letter2_col < 0:\r\n+                letter2_row = grid.index(row)\r\n+                letter2_col = row.index(letter2)\r\n+                print(\"Row:\", letter2_row, \"Column:\", letter2_col)\r\n+\r\n+    if letter1_col == letter2_col and letter1_col > 0:\r\n+        print(\"Same column, 1:\", letter1_col, \", 2:\", letter2_col)\r\n+    # If same column:\r\n+    # Else rectangle:\r\n"
                },
                {
                    "date": 1719524963045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n     for row in grid:\r\n         # Early exit for same row:\r\n         if letter1 in row and letter2 in row:\r\n             print(\"Same row\")\r\n-            continue\r\n+            \r\n         else:\r\n             if letter1 in row and letter1_col < 0:\r\n                 letter1_row = grid.index(row)\r\n                 letter1_col = row.index(letter1)\r\n"
                },
                {
                    "date": 1719525032465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n     for row in grid:\r\n         # Early exit for same row:\r\n         if letter1 in row and letter2 in row:\r\n             print(\"Same row\")\r\n-            \r\n+            break\r\n         else:\r\n             if letter1 in row and letter1_col < 0:\r\n                 letter1_row = grid.index(row)\r\n                 letter1_col = row.index(letter1)\r\n@@ -48,55 +48,4 @@\n     if letter1_col == letter2_col and letter1_col > 0:\r\n         print(\"Same column, 1:\", letter1_col, \", 2:\", letter2_col)\r\n     # If same column:\r\n     # Else rectangle:\r\n-message = \"IOEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-\r\n-grid = [\r\n-    ['S','U','P','E','R'],\r\n-    ['Y','A','B','C','D'],\r\n-    ['F','G','H','I','K'],\r\n-    ['L','M','N','O','Q'],\r\n-    ['T','V','W','X','Z']\r\n-]\r\n-\r\n-decrypted = \"\"\r\n-\r\n-def index_of(value, in_list):\r\n-    try:\r\n-        return in_list.index(value)\r\n-    except ValueError:\r\n-        return None\r\n-\r\n-for digraph_point in range(0, len(message), 2):\r\n-    letter1 = message[digraph_point]\r\n-    letter2 = message[digraph_point+1]\r\n-\r\n-    letter1_row = -1\r\n-    letter1_col = -1\r\n-    letter2_row = -1\r\n-    letter2_col = -1\r\n-\r\n-    digraph = letter1 + letter2\r\n-    print(digraph)\r\n-    # decrypted_digraph = grid[grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n-    # print(decrypted_digraph)\r\n-    # If same row:\r\n-    for row in grid:\r\n-        # Early exit for same row:\r\n-        if letter1 in row and letter2 in row:\r\n-            print(\"Same row\")\r\n-            continue\r\n-        else:\r\n-            if letter1 in row and letter1_col < 0:\r\n-                letter1_row = grid.index(row)\r\n-                letter1_col = row.index(letter1)\r\n-                print(\"Row:\", letter1_row, \"Column:\", letter1_col)\r\n-            if letter2 in row and letter2_col < 0:\r\n-                letter2_row = grid.index(row)\r\n-                letter2_col = row.index(letter2)\r\n-                print(\"Row:\", letter2_row, \"Column:\", letter2_col)\r\n-\r\n-    if letter1_col == letter2_col and letter1_col > 0:\r\n-        print(\"Same column, 1:\", letter1_col, \", 2:\", letter2_col)\r\n-    # If same column:\r\n-    # Else rectangle:\r\n"
                },
                {
                    "date": 1719525139620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n     for row in grid:\r\n         # Early exit for same row:\r\n         if letter1 in row and letter2 in row:\r\n             print(\"Same row\")\r\n-            break\r\n+            # break\r\n         else:\r\n             if letter1 in row and letter1_col < 0:\r\n                 letter1_row = grid.index(row)\r\n                 letter1_col = row.index(letter1)\r\n"
                },
                {
                    "date": 1719525161329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,51 @@\n+message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+\r\n+grid = [\r\n+    ['S','U','P','E','R'],\r\n+    ['Y','A','B','C','D'],\r\n+    ['F','G','H','I','K'],\r\n+    ['L','M','N','O','Q'],\r\n+    ['T','V','W','X','Z']\r\n+]\r\n+\r\n+decrypted = \"\"\r\n+\r\n+def index_of(value, in_list):\r\n+    try:\r\n+        return in_list.index(value)\r\n+    except ValueError:\r\n+        return None\r\n+\r\n+for digraph_point in range(0, len(message), 2):\r\n+    letter1 = message[digraph_point]\r\n+    letter2 = message[digraph_point+1]\r\n+\r\n+    letter1_row = -1\r\n+    letter1_col = -1\r\n+    letter2_row = -1\r\n+    letter2_col = -1\r\n+\r\n+    digraph = letter1 + letter2\r\n+    print(digraph)\r\n+    # decrypted_digraph = grid[grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n+    # print(decrypted_digraph)\r\n+    # If same row:\r\n+    for row in grid:\r\n+        # Early exit for same row:\r\n+        if letter1 in row and letter2 in row:\r\n+            print(\"Same row\")\r\n+            break\r\n+        else:\r\n+            if letter1 in row and letter1_col < 0:\r\n+                letter1_row = grid.index(row)\r\n+                letter1_col = row.index(letter1)\r\n+                print(\"Row:\", letter1_row, \"Column:\", letter1_col)\r\n+            if letter2 in row and letter2_col < 0:\r\n+                letter2_row = grid.index(row)\r\n+                letter2_col = row.index(letter2)\r\n+                print(\"Row:\", letter2_row, \"Column:\", letter2_col)\r\n+\r\n+        if letter1_col == letter2_col and letter1_col > 0:\r\n+            print(\"Same column, 1:\", letter1_col, \", 2:\", letter2_col)\r\n+    # If same column:\r\n+    # Else rectangle:\r\n"
                },
                {
                    "date": 1719525185579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,59 +44,8 @@\n                 letter2_row = grid.index(row)\r\n                 letter2_col = row.index(letter2)\r\n                 print(\"Row:\", letter2_row, \"Column:\", letter2_col)\r\n \r\n-        if letter1_col == letter2_col and letter1_col > 0:\r\n+        if letter1_col == letter2_col:\r\n             print(\"Same column, 1:\", letter1_col, \", 2:\", letter2_col)\r\n     # If same column:\r\n     # Else rectangle:\r\n-message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-\r\n-grid = [\r\n-    ['S','U','P','E','R'],\r\n-    ['Y','A','B','C','D'],\r\n-    ['F','G','H','I','K'],\r\n-    ['L','M','N','O','Q'],\r\n-    ['T','V','W','X','Z']\r\n-]\r\n-\r\n-decrypted = \"\"\r\n-\r\n-def index_of(value, in_list):\r\n-    try:\r\n-        return in_list.index(value)\r\n-    except ValueError:\r\n-        return None\r\n-\r\n-for digraph_point in range(0, len(message), 2):\r\n-    letter1 = message[digraph_point]\r\n-    letter2 = message[digraph_point+1]\r\n-\r\n-    letter1_row = -1\r\n-    letter1_col = -1\r\n-    letter2_row = -1\r\n-    letter2_col = -1\r\n-\r\n-    digraph = letter1 + letter2\r\n-    print(digraph)\r\n-    # decrypted_digraph = grid[grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n-    # print(decrypted_digraph)\r\n-    # If same row:\r\n-    for row in grid:\r\n-        # Early exit for same row:\r\n-        if letter1 in row and letter2 in row:\r\n-            print(\"Same row\")\r\n-            # break\r\n-        else:\r\n-            if letter1 in row and letter1_col < 0:\r\n-                letter1_row = grid.index(row)\r\n-                letter1_col = row.index(letter1)\r\n-                print(\"Row:\", letter1_row, \"Column:\", letter1_col)\r\n-            if letter2 in row and letter2_col < 0:\r\n-                letter2_row = grid.index(row)\r\n-                letter2_col = row.index(letter2)\r\n-                print(\"Row:\", letter2_row, \"Column:\", letter2_col)\r\n-\r\n-    if letter1_col == letter2_col and letter1_col > 0:\r\n-        print(\"Same column, 1:\", letter1_col, \", 2:\", letter2_col)\r\n-    # If same column:\r\n-    # Else rectangle:\r\n"
                },
                {
                    "date": 1719525196321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n     for row in grid:\r\n         # Early exit for same row:\r\n         if letter1 in row and letter2 in row:\r\n             print(\"Same row\")\r\n-            break\r\n+            continue\r\n         else:\r\n             if letter1 in row and letter1_col < 0:\r\n                 letter1_row = grid.index(row)\r\n                 letter1_col = row.index(letter1)\r\n"
                },
                {
                    "date": 1719525249061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n     for row in grid:\r\n         # Early exit for same row:\r\n         if letter1 in row and letter2 in row:\r\n             print(\"Same row\")\r\n-            continue\r\n+            break\r\n         else:\r\n             if letter1 in row and letter1_col < 0:\r\n                 letter1_row = grid.index(row)\r\n                 letter1_col = row.index(letter1)\r\n@@ -44,8 +44,8 @@\n                 letter2_row = grid.index(row)\r\n                 letter2_col = row.index(letter2)\r\n                 print(\"Row:\", letter2_row, \"Column:\", letter2_col)\r\n \r\n-        if letter1_col == letter2_col:\r\n+        if letter1_col == letter2_col and letter1_col > 0:\r\n             print(\"Same column, 1:\", letter1_col, \", 2:\", letter2_col)\r\n     # If same column:\r\n     # Else rectangle:\r\n"
                },
                {
                    "date": 1719525346144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,6 +46,8 @@\n                 print(\"Row:\", letter2_row, \"Column:\", letter2_col)\r\n \r\n         if letter1_col == letter2_col and letter1_col > 0:\r\n             print(\"Same column, 1:\", letter1_col, \", 2:\", letter2_col)\r\n+        else:\r\n+            print(\"Rectangle\")\r\n     # If same column:\r\n     # Else rectangle:\r\n"
                },
                {
                    "date": 1719525364890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n     for row in grid:\r\n         # Early exit for same row:\r\n         if letter1 in row and letter2 in row:\r\n             print(\"Same row\")\r\n-            break\r\n+            continue\r\n         else:\r\n             if letter1 in row and letter1_col < 0:\r\n                 letter1_row = grid.index(row)\r\n                 letter1_col = row.index(letter1)\r\n"
                },
                {
                    "date": 1719525434329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,10 +44,10 @@\n                 letter2_row = grid.index(row)\r\n                 letter2_col = row.index(letter2)\r\n                 print(\"Row:\", letter2_row, \"Column:\", letter2_col)\r\n \r\n-        if letter1_col == letter2_col and letter1_col > 0:\r\n-            print(\"Same column, 1:\", letter1_col, \", 2:\", letter2_col)\r\n-        else:\r\n-            print(\"Rectangle\")\r\n+    if letter1_col == letter2_col and letter1_col > 0:\r\n+        print(\"Same column, 1:\", letter1_col, \", 2:\", letter2_col)\r\n+    else:\r\n+        print(\"Rectangle\")\r\n     # If same column:\r\n     # Else rectangle:\r\n"
                },
                {
                    "date": 1719525462079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,8 +46,8 @@\n                 print(\"Row:\", letter2_row, \"Column:\", letter2_col)\r\n \r\n     if letter1_col == letter2_col and letter1_col > 0:\r\n         print(\"Same column, 1:\", letter1_col, \", 2:\", letter2_col)\r\n-    else:\r\n+    elif letter1_col > 0:\r\n         print(\"Rectangle\")\r\n     # If same column:\r\n     # Else rectangle:\r\n"
                },
                {
                    "date": 1719525530425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n     for row in grid:\r\n         # Early exit for same row:\r\n         if letter1 in row and letter2 in row:\r\n             print(\"Same row\")\r\n-            continue\r\n+            # continue\r\n         else:\r\n             if letter1 in row and letter1_col < 0:\r\n                 letter1_row = grid.index(row)\r\n                 letter1_col = row.index(letter1)\r\n"
                },
                {
                    "date": 1719525837487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,29 +25,18 @@\n     letter2_row = -1\r\n     letter2_col = -1\r\n \r\n     digraph = letter1 + letter2\r\n-    print(digraph)\r\n-    # decrypted_digraph = grid[grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n-    # print(decrypted_digraph)\r\n-    # If same row:\r\n-    for row in grid:\r\n-        # Early exit for same row:\r\n-        if letter1 in row and letter2 in row:\r\n-            print(\"Same row\")\r\n-            # continue\r\n-        else:\r\n-            if letter1 in row and letter1_col < 0:\r\n-                letter1_row = grid.index(row)\r\n-                letter1_col = row.index(letter1)\r\n-                print(\"Row:\", letter1_row, \"Column:\", letter1_col)\r\n-            if letter2 in row and letter2_col < 0:\r\n-                letter2_row = grid.index(row)\r\n-                letter2_col = row.index(letter2)\r\n-                print(\"Row:\", letter2_row, \"Column:\", letter2_col)\r\n-\r\n-    if letter1_col == letter2_col and letter1_col > 0:\r\n-        print(\"Same column, 1:\", letter1_col, \", 2:\", letter2_col)\r\n-    elif letter1_col > 0:\r\n-        print(\"Rectangle\")\r\n-    # If same column:\r\n-    # Else rectangle:\r\n+    for r, row in enumerate(grid):\r\n+        if letter1 in row:\r\n+            letter1_row = r\r\n+            letter1_col = row.index(letter1)\r\n+        if letter2 in row:\r\n+            letter2_row = r\r\n+            letter2_col = row.index(letter2)\r\n+    \r\n+    if letter1_row == letter2_row:\r\n+        print(f\"Same row: {letter1} and {letter2}\")\r\n+    elif letter1_col == letter2_col:\r\n+        print(f\"Same column: {letter1} and {letter2}\")\r\n+    else:\r\n+        print(f\"Rectangle: {letter1} and {letter2}\")\r\n"
                },
                {
                    "date": 1719525889980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,44 @@\n+message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+\r\n+grid = [\r\n+    ['S','U','P','E','R'],\r\n+    ['Y','A','B','C','D'],\r\n+    ['F','G','H','I','K'],\r\n+    ['L','M','N','O','Q'],\r\n+    ['T','V','W','X','Z']\r\n+]\r\n+\r\n+decrypted = \"\"\r\n+\r\n+def index_of(value, in_list):\r\n+    try:\r\n+        return in_list.index(value)\r\n+    except ValueError:\r\n+        return None\r\n+\r\n+for digraph_point in range(0, len(message), 2):\r\n+    letter1 = message[digraph_point]\r\n+    letter2 = message[digraph_point+1]\r\n+\r\n+    letter1_row = -1\r\n+    letter1_col = -1\r\n+    letter2_row = -1\r\n+    letter2_col = -1\r\n+\r\n+    digraph = letter1 + letter2\r\n+\r\n+    for r, row in enumerate(grid):\r\n+        if letter1 in row:\r\n+            letter1_row = r\r\n+            print(r)\r\n+            letter1_col = row.index(letter1)\r\n+        if letter2 in row:\r\n+            letter2_row = r\r\n+            letter2_col = row.index(letter2)\r\n+    \r\n+    if letter1_row == letter2_row:\r\n+        print(f\"Same row: {letter1} and {letter2}\")\r\n+    elif letter1_col == letter2_col:\r\n+        print(f\"Same column: {letter1} and {letter2}\")\r\n+    else:\r\n+        print(f\"Rectangle: {letter1} and {letter2}\")\r\n"
                },
                {
                    "date": 1719525972351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,16 +25,15 @@\n     letter2_row = -1\r\n     letter2_col = -1\r\n \r\n     digraph = letter1 + letter2\r\n-\r\n-    for r, row in enumerate(grid):\r\n+    \r\n+    for rIndex, row in enumerate(grid):\r\n         if letter1 in row:\r\n-            letter1_row = r\r\n-            print(r)\r\n+            letter1_row = rIndex\r\n             letter1_col = row.index(letter1)\r\n         if letter2 in row:\r\n-            letter2_row = r\r\n+            letter2_row = rIndex\r\n             letter2_col = row.index(letter2)\r\n     \r\n     if letter1_row == letter2_row:\r\n         print(f\"Same row: {letter1} and {letter2}\")\r\n"
                },
                {
                    "date": 1719525989939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+message = \"IOEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n \r\n grid = [\r\n     ['S','U','P','E','R'],\r\n     ['Y','A','B','C','D'],\r\n"
                },
                {
                    "date": 1719526016555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-message = \"IOEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n \r\n grid = [\r\n     ['S','U','P','E','R'],\r\n     ['Y','A','B','C','D'],\r\n@@ -40,46 +40,4 @@\n     elif letter1_col == letter2_col:\r\n         print(f\"Same column: {letter1} and {letter2}\")\r\n     else:\r\n         print(f\"Rectangle: {letter1} and {letter2}\")\r\n-message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-\r\n-grid = [\r\n-    ['S','U','P','E','R'],\r\n-    ['Y','A','B','C','D'],\r\n-    ['F','G','H','I','K'],\r\n-    ['L','M','N','O','Q'],\r\n-    ['T','V','W','X','Z']\r\n-]\r\n-\r\n-decrypted = \"\"\r\n-\r\n-def index_of(value, in_list):\r\n-    try:\r\n-        return in_list.index(value)\r\n-    except ValueError:\r\n-        return None\r\n-\r\n-for digraph_point in range(0, len(message), 2):\r\n-    letter1 = message[digraph_point]\r\n-    letter2 = message[digraph_point+1]\r\n-\r\n-    letter1_row = -1\r\n-    letter1_col = -1\r\n-    letter2_row = -1\r\n-    letter2_col = -1\r\n-\r\n-    digraph = letter1 + letter2\r\n-    for r, row in enumerate(grid):\r\n-        if letter1 in row:\r\n-            letter1_row = r\r\n-            letter1_col = row.index(letter1)\r\n-        if letter2 in row:\r\n-            letter2_row = r\r\n-            letter2_col = row.index(letter2)\r\n-    \r\n-    if letter1_row == letter2_row:\r\n-        print(f\"Same row: {letter1} and {letter2}\")\r\n-    elif letter1_col == letter2_col:\r\n-        print(f\"Same column: {letter1} and {letter2}\")\r\n-    else:\r\n-        print(f\"Rectangle: {letter1} and {letter2}\")\r\n"
                },
                {
                    "date": 1719526240800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,46 @@\n+message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+\r\n+grid = [\r\n+    ['S','U','P','E','R'],\r\n+    ['Y','A','B','C','D'],\r\n+    ['F','G','H','I','K'],\r\n+    ['L','M','N','O','Q'],\r\n+    ['T','V','W','X','Z']\r\n+]\r\n+\r\n+decrypted = \"\"\r\n+\r\n+def index_of(value, in_list):\r\n+    try:\r\n+        return in_list.index(value)\r\n+    except ValueError:\r\n+        return None\r\n+\r\n+for digraph_point in range(0, len(message), 2):\r\n+    letter1 = message[digraph_point]\r\n+    letter2 = message[digraph_point+1]\r\n+\r\n+    letter1_row = -1\r\n+    letter1_col = -1\r\n+    letter2_row = -1\r\n+    letter2_col = -1\r\n+\r\n+    digraph = letter1 + letter2\r\n+    \r\n+    for rIndex, row in enumerate(grid):\r\n+        if letter1 in row:\r\n+            letter1_row = rIndex\r\n+            letter1_col = row.index(letter1)\r\n+        if letter2 in row:\r\n+            letter2_row = rIndex\r\n+            letter2_col = row.index(letter2)\r\n+    \r\n+    if letter1_row == letter2_row:\r\n+        print(f\"Same row: {letter1} and {letter2}\")\r\n+        decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n+        print(decrypted_digraph)\r\n+        # decrypted_digraph = grid[letter1_row][grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n+    elif letter1_col == letter2_col:\r\n+        print(f\"Same column: {letter1} and {letter2}\")\r\n+    else:\r\n+        print(f\"Rectangle: {letter1} and {letter2}\")\r\n"
                },
                {
                    "date": 1719526434579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,10 @@\n         return in_list.index(value)\r\n     except ValueError:\r\n         return None\r\n \r\n+# Edgecases: wrap around\r\n+\r\n for digraph_point in range(0, len(message), 2):\r\n     letter1 = message[digraph_point]\r\n     letter2 = message[digraph_point+1]\r\n \r\n@@ -43,47 +45,4 @@\n     elif letter1_col == letter2_col:\r\n         print(f\"Same column: {letter1} and {letter2}\")\r\n     else:\r\n         print(f\"Rectangle: {letter1} and {letter2}\")\r\n-message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-\r\n-grid = [\r\n-    ['S','U','P','E','R'],\r\n-    ['Y','A','B','C','D'],\r\n-    ['F','G','H','I','K'],\r\n-    ['L','M','N','O','Q'],\r\n-    ['T','V','W','X','Z']\r\n-]\r\n-\r\n-decrypted = \"\"\r\n-\r\n-def index_of(value, in_list):\r\n-    try:\r\n-        return in_list.index(value)\r\n-    except ValueError:\r\n-        return None\r\n-\r\n-for digraph_point in range(0, len(message), 2):\r\n-    letter1 = message[digraph_point]\r\n-    letter2 = message[digraph_point+1]\r\n-\r\n-    letter1_row = -1\r\n-    letter1_col = -1\r\n-    letter2_row = -1\r\n-    letter2_col = -1\r\n-\r\n-    digraph = letter1 + letter2\r\n-    \r\n-    for rIndex, row in enumerate(grid):\r\n-        if letter1 in row:\r\n-            letter1_row = rIndex\r\n-            letter1_col = row.index(letter1)\r\n-        if letter2 in row:\r\n-            letter2_row = rIndex\r\n-            letter2_col = row.index(letter2)\r\n-    \r\n-    if letter1_row == letter2_row:\r\n-        print(f\"Same row: {letter1} and {letter2}\")\r\n-    elif letter1_col == letter2_col:\r\n-        print(f\"Same column: {letter1} and {letter2}\")\r\n-    else:\r\n-        print(f\"Rectangle: {letter1} and {letter2}\")\r\n"
                },
                {
                    "date": 1719531893831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,8 +37,9 @@\n             letter2_row = rIndex\r\n             letter2_col = row.index(letter2)\r\n     \r\n     if letter1_row == letter2_row:\r\n+        # print(f\"Same row: {letter1} and {letter2}\")\r\n         print(f\"Same row: {letter1} and {letter2}\")\r\n         decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n         print(decrypted_digraph)\r\n         # decrypted_digraph = grid[letter1_row][grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n"
                },
                {
                    "date": 1719532066547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,51 @@\n+message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+\r\n+grid = [\r\n+    ['S','U','P','E','R'],\r\n+    ['Y','A','B','C','D'],\r\n+    ['F','G','H','I','K'],\r\n+    ['L','M','N','O','Q'],\r\n+    ['T','V','W','X','Z']\r\n+]\r\n+\r\n+decrypted = \"\"\r\n+\r\n+def index_of(value, in_list):\r\n+    try:\r\n+        return in_list.index(value)\r\n+    except ValueError:\r\n+        return None\r\n+\r\n+# Edgecases: wrap around\r\n+\r\n+for digraph_point in range(0, len(message), 2):\r\n+    letter1 = message[digraph_point]\r\n+    letter2 = message[digraph_point+1]\r\n+\r\n+    letter1_row = -1\r\n+    letter1_col = -1\r\n+    letter2_row = -1\r\n+    letter2_col = -1\r\n+\r\n+    digraph = letter1 + letter2\r\n+    \r\n+    for rIndex, row in enumerate(grid):\r\n+        if letter1 in row:\r\n+            letter1_row = rIndex\r\n+            letter1_col = row.index(letter1)\r\n+        if letter2 in row:\r\n+            letter2_row = rIndex\r\n+            letter2_col = row.index(letter2)\r\n+    \r\n+    if letter1_row == letter2_row:\r\n+        # print(f\"Same row: {letter1} and {letter2}\")\r\n+        print(f\"Same row: {letter1} and {letter2}\")\r\n+        decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n+        print(decrypted_digraph)\r\n+        # decrypted_digraph = grid[letter1_row][grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n+    elif letter1_col == letter2_col:\r\n+        print(f\"Same column: {letter1} and {letter2}\")\r\n+    else:\r\n+        print(f\"Rectangle: {letter1} and {letter2}\")\r\n+        decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n+        print(decrypted_digraph)\r\n"
                },
                {
                    "date": 1719532166748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,53 @@\n+message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+\r\n+grid = [\r\n+    ['S','U','P','E','R'],\r\n+    ['Y','A','B','C','D'],\r\n+    ['F','G','H','I','K'],\r\n+    ['L','M','N','O','Q'],\r\n+    ['T','V','W','X','Z']\r\n+]\r\n+\r\n+decrypted = \"\"\r\n+\r\n+def index_of(value, in_list):\r\n+    try:\r\n+        return in_list.index(value)\r\n+    except ValueError:\r\n+        return None\r\n+\r\n+# Edgecases: wrap around\r\n+\r\n+for digraph_point in range(0, len(message), 2):\r\n+    letter1 = message[digraph_point]\r\n+    letter2 = message[digraph_point+1]\r\n+\r\n+    letter1_row = -1\r\n+    letter1_col = -1\r\n+    letter2_row = -1\r\n+    letter2_col = -1\r\n+\r\n+    digraph = letter1 + letter2\r\n+    \r\n+    for rIndex, row in enumerate(grid):\r\n+        if letter1 in row:\r\n+            letter1_row = rIndex\r\n+            letter1_col = row.index(letter1)\r\n+        if letter2 in row:\r\n+            letter2_row = rIndex\r\n+            letter2_col = row.index(letter2)\r\n+    \r\n+    if letter1_row == letter2_row:\r\n+        # print(f\"Same row: {letter1} and {letter2}\")\r\n+        print(f\"Same row: {letter1} and {letter2}\")\r\n+        decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n+        print(decrypted_digraph)\r\n+        decrypted += decrypted_digraph\r\n+        # decrypted_digraph = grid[letter1_row][grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n+    elif letter1_col == letter2_col:\r\n+        print(f\"Same column: {letter1} and {letter2}\")\r\n+    else:\r\n+        print(f\"Rectangle: {letter1} and {letter2}\")\r\n+        decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n+        print(decrypted_digraph)\r\n+        decrypted += decrypted_digraph\r\n"
                },
                {
                    "date": 1719532176153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,55 @@\n+message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+\r\n+grid = [\r\n+    ['S','U','P','E','R'],\r\n+    ['Y','A','B','C','D'],\r\n+    ['F','G','H','I','K'],\r\n+    ['L','M','N','O','Q'],\r\n+    ['T','V','W','X','Z']\r\n+]\r\n+\r\n+decrypted = \"\"\r\n+\r\n+def index_of(value, in_list):\r\n+    try:\r\n+        return in_list.index(value)\r\n+    except ValueError:\r\n+        return None\r\n+\r\n+# Edgecases: wrap around\r\n+\r\n+for digraph_point in range(0, len(message), 2):\r\n+    letter1 = message[digraph_point]\r\n+    letter2 = message[digraph_point+1]\r\n+\r\n+    letter1_row = -1\r\n+    letter1_col = -1\r\n+    letter2_row = -1\r\n+    letter2_col = -1\r\n+\r\n+    digraph = letter1 + letter2\r\n+    \r\n+    for rIndex, row in enumerate(grid):\r\n+        if letter1 in row:\r\n+            letter1_row = rIndex\r\n+            letter1_col = row.index(letter1)\r\n+        if letter2 in row:\r\n+            letter2_row = rIndex\r\n+            letter2_col = row.index(letter2)\r\n+    \r\n+    if letter1_row == letter2_row:\r\n+        # print(f\"Same row: {letter1} and {letter2}\")\r\n+        print(f\"Same row: {letter1} and {letter2}\")\r\n+        decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n+        print(decrypted_digraph)\r\n+        decrypted += decrypted_digraph\r\n+        # decrypted_digraph = grid[letter1_row][grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n+    elif letter1_col == letter2_col:\r\n+        print(f\"Same column: {letter1} and {letter2}\")\r\n+    else:\r\n+        print(f\"Rectangle: {letter1} and {letter2}\")\r\n+        decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n+        print(decrypted_digraph)\r\n+        decrypted += decrypted_digraph\r\n+\r\n+print(decrypted)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719532244258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,14 +9,8 @@\n ]\r\n \r\n decrypted = \"\"\r\n \r\n-def index_of(value, in_list):\r\n-    try:\r\n-        return in_list.index(value)\r\n-    except ValueError:\r\n-        return None\r\n-\r\n # Edgecases: wrap around\r\n \r\n for digraph_point in range(0, len(message), 2):\r\n     letter1 = message[digraph_point]\r\n@@ -51,158 +45,5 @@\n         decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n         print(decrypted_digraph)\r\n         decrypted += decrypted_digraph\r\n \r\n-print(decrypted)\n-message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-\r\n-grid = [\r\n-    ['S','U','P','E','R'],\r\n-    ['Y','A','B','C','D'],\r\n-    ['F','G','H','I','K'],\r\n-    ['L','M','N','O','Q'],\r\n-    ['T','V','W','X','Z']\r\n-]\r\n-\r\n-decrypted = \"\"\r\n-\r\n-def index_of(value, in_list):\r\n-    try:\r\n-        return in_list.index(value)\r\n-    except ValueError:\r\n-        return None\r\n-\r\n-# Edgecases: wrap around\r\n-\r\n-for digraph_point in range(0, len(message), 2):\r\n-    letter1 = message[digraph_point]\r\n-    letter2 = message[digraph_point+1]\r\n-\r\n-    letter1_row = -1\r\n-    letter1_col = -1\r\n-    letter2_row = -1\r\n-    letter2_col = -1\r\n-\r\n-    digraph = letter1 + letter2\r\n-    \r\n-    for rIndex, row in enumerate(grid):\r\n-        if letter1 in row:\r\n-            letter1_row = rIndex\r\n-            letter1_col = row.index(letter1)\r\n-        if letter2 in row:\r\n-            letter2_row = rIndex\r\n-            letter2_col = row.index(letter2)\r\n-    \r\n-    if letter1_row == letter2_row:\r\n-        # print(f\"Same row: {letter1} and {letter2}\")\r\n-        print(f\"Same row: {letter1} and {letter2}\")\r\n-        decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n-        print(decrypted_digraph)\r\n-        decrypted += decrypted_digraph\r\n-        # decrypted_digraph = grid[letter1_row][grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n-    elif letter1_col == letter2_col:\r\n-        print(f\"Same column: {letter1} and {letter2}\")\r\n-    else:\r\n-        print(f\"Rectangle: {letter1} and {letter2}\")\r\n-        decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n-        print(decrypted_digraph)\r\n-        decrypted += decrypted_digraph\r\n-message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-\r\n-grid = [\r\n-    ['S','U','P','E','R'],\r\n-    ['Y','A','B','C','D'],\r\n-    ['F','G','H','I','K'],\r\n-    ['L','M','N','O','Q'],\r\n-    ['T','V','W','X','Z']\r\n-]\r\n-\r\n-decrypted = \"\"\r\n-\r\n-def index_of(value, in_list):\r\n-    try:\r\n-        return in_list.index(value)\r\n-    except ValueError:\r\n-        return None\r\n-\r\n-# Edgecases: wrap around\r\n-\r\n-for digraph_point in range(0, len(message), 2):\r\n-    letter1 = message[digraph_point]\r\n-    letter2 = message[digraph_point+1]\r\n-\r\n-    letter1_row = -1\r\n-    letter1_col = -1\r\n-    letter2_row = -1\r\n-    letter2_col = -1\r\n-\r\n-    digraph = letter1 + letter2\r\n-    \r\n-    for rIndex, row in enumerate(grid):\r\n-        if letter1 in row:\r\n-            letter1_row = rIndex\r\n-            letter1_col = row.index(letter1)\r\n-        if letter2 in row:\r\n-            letter2_row = rIndex\r\n-            letter2_col = row.index(letter2)\r\n-    \r\n-    if letter1_row == letter2_row:\r\n-        # print(f\"Same row: {letter1} and {letter2}\")\r\n-        print(f\"Same row: {letter1} and {letter2}\")\r\n-        decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n-        print(decrypted_digraph)\r\n-        # decrypted_digraph = grid[letter1_row][grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n-    elif letter1_col == letter2_col:\r\n-        print(f\"Same column: {letter1} and {letter2}\")\r\n-    else:\r\n-        print(f\"Rectangle: {letter1} and {letter2}\")\r\n-        decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n-        print(decrypted_digraph)\r\n-message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-\r\n-grid = [\r\n-    ['S','U','P','E','R'],\r\n-    ['Y','A','B','C','D'],\r\n-    ['F','G','H','I','K'],\r\n-    ['L','M','N','O','Q'],\r\n-    ['T','V','W','X','Z']\r\n-]\r\n-\r\n-decrypted = \"\"\r\n-\r\n-def index_of(value, in_list):\r\n-    try:\r\n-        return in_list.index(value)\r\n-    except ValueError:\r\n-        return None\r\n-\r\n-# Edgecases: wrap around\r\n-\r\n-for digraph_point in range(0, len(message), 2):\r\n-    letter1 = message[digraph_point]\r\n-    letter2 = message[digraph_point+1]\r\n-\r\n-    letter1_row = -1\r\n-    letter1_col = -1\r\n-    letter2_row = -1\r\n-    letter2_col = -1\r\n-\r\n-    digraph = letter1 + letter2\r\n-    \r\n-    for rIndex, row in enumerate(grid):\r\n-        if letter1 in row:\r\n-            letter1_row = rIndex\r\n-            letter1_col = row.index(letter1)\r\n-        if letter2 in row:\r\n-            letter2_row = rIndex\r\n-            letter2_col = row.index(letter2)\r\n-    \r\n-    if letter1_row == letter2_row:\r\n-        # print(f\"Same row: {letter1} and {letter2}\")\r\n-        print(f\"Same row: {letter1} and {letter2}\")\r\n-        decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n-        print(decrypted_digraph)\r\n-        # decrypted_digraph = grid[letter1_row][grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n-    elif letter1_col == letter2_col:\r\n-        print(f\"Same column: {letter1} and {letter2}\")\r\n-    else:\r\n-        print(f\"Rectangle: {letter1} and {letter2}\")\n\\ No newline at end of file\n+print(decrypted)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719532469079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,43 +7,43 @@\n     ['L','M','N','O','Q'],\r\n     ['T','V','W','X','Z']\r\n ]\r\n \r\n-decrypted = \"\"\r\n+def main():\r\n+    decrypted = \"\"\r\n \r\n-# Edgecases: wrap around\r\n+    # Edgecases: wrap around\r\n \r\n-for digraph_point in range(0, len(message), 2):\r\n-    letter1 = message[digraph_point]\r\n-    letter2 = message[digraph_point+1]\r\n+    for digraph_point in range(0, len(message), 2):\r\n+        letter1 = message[digraph_point]\r\n+        letter2 = message[digraph_point+1]\r\n \r\n-    letter1_row = -1\r\n-    letter1_col = -1\r\n-    letter2_row = -1\r\n-    letter2_col = -1\r\n+        letter1_row = -1\r\n+        letter1_col = -1\r\n+        letter2_row = -1\r\n+        letter2_col = -1\r\n+        \r\n+        for rIndex, row in enumerate(grid):\r\n+            if letter1 in row:\r\n+                letter1_row = rIndex\r\n+                letter1_col = row.index(letter1)\r\n+            if letter2 in row:\r\n+                letter2_row = rIndex\r\n+                letter2_col = row.index(letter2)\r\n+        \r\n+        if letter1_row == letter2_row:\r\n+            # print(f\"Same row: {letter1} and {letter2}\")\r\n+            print(f\"Same row: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n+            print(decrypted_digraph)\r\n+            decrypted += decrypted_digraph\r\n+            # decrypted_digraph = grid[letter1_row][grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n+        elif letter1_col == letter2_col:\r\n\\ No newline at end of file\n+            print(f\"Same column: {letter1} and {letter2}\")\r\n+        else:\r\n+            print(f\"Rectangle: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n+            print(decrypted_digraph)\r\n+            decrypted += decrypted_digraph\r\n \r\n-    digraph = letter1 + letter2\r\n-    \r\n-    for rIndex, row in enumerate(grid):\r\n-        if letter1 in row:\r\n-            letter1_row = rIndex\r\n-            letter1_col = row.index(letter1)\r\n-        if letter2 in row:\r\n-            letter2_row = rIndex\r\n-            letter2_col = row.index(letter2)\r\n-    \r\n-    if letter1_row == letter2_row:\r\n-        # print(f\"Same row: {letter1} and {letter2}\")\r\n-        print(f\"Same row: {letter1} and {letter2}\")\r\n-        decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n-        print(decrypted_digraph)\r\n-        decrypted += decrypted_digraph\r\n-        # decrypted_digraph = grid[letter1_row][grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n-    elif letter1_col == letter2_col:\r\n-        print(f\"Same column: {letter1} and {letter2}\")\r\n-    else:\r\n-        print(f\"Rectangle: {letter1} and {letter2}\")\r\n-        decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n-        print(decrypted_digraph)\r\n-        decrypted += decrypted_digraph\r\n-\r\n-print(decrypted)\n+    print(decrypted)\r\n+    return decrypted\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719532556481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,8 +38,11 @@\n             decrypted += decrypted_digraph\r\n             # decrypted_digraph = grid[letter1_row][grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n         elif letter1_col == letter2_col:\r\n             print(f\"Same column: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n+            print(decrypted_digraph)\r\n+            decrypted += decrypted_digraph\r\n         else:\r\n             print(f\"Rectangle: {letter1} and {letter2}\")\r\n             decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n             print(decrypted_digraph)\r\n"
                },
                {
                    "date": 1719532690193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,19 +33,22 @@\n         if letter1_row == letter2_row:\r\n             # print(f\"Same row: {letter1} and {letter2}\")\r\n             print(f\"Same row: {letter1} and {letter2}\")\r\n             decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n+            decrypted_digraph.strip(\"X\")\r\n             print(decrypted_digraph)\r\n             decrypted += decrypted_digraph\r\n             # decrypted_digraph = grid[letter1_row][grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n         elif letter1_col == letter2_col:\r\n             print(f\"Same column: {letter1} and {letter2}\")\r\n             decrypted_digraph = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n+            decrypted_digraph.strip(\"X\")\r\n             print(decrypted_digraph)\r\n             decrypted += decrypted_digraph\r\n         else:\r\n             print(f\"Rectangle: {letter1} and {letter2}\")\r\n             decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n+            decrypted_digraph.strip(\"X\")\r\n             print(decrypted_digraph)\r\n             decrypted += decrypted_digraph\r\n \r\n     print(decrypted)\r\n"
                },
                {
                    "date": 1719532731773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,5 +51,7 @@\n             print(decrypted_digraph)\r\n             decrypted += decrypted_digraph\r\n \r\n     print(decrypted)\r\n-    return decrypted\n\\ No newline at end of file\n+    return decrypted\r\n+\r\n+main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719532800389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,22 +33,22 @@\n         if letter1_row == letter2_row:\r\n             # print(f\"Same row: {letter1} and {letter2}\")\r\n             print(f\"Same row: {letter1} and {letter2}\")\r\n             decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n-            decrypted_digraph.strip(\"X\")\r\n+            decrypted_digraph.replace(\"X\", \"\")\r\n             print(decrypted_digraph)\r\n             decrypted += decrypted_digraph\r\n             # decrypted_digraph = grid[letter1_row][grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n         elif letter1_col == letter2_col:\r\n             print(f\"Same column: {letter1} and {letter2}\")\r\n             decrypted_digraph = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n-            decrypted_digraph.strip(\"X\")\r\n+            decrypted_digraph.replace(\"X\", \"\")\r\n             print(decrypted_digraph)\r\n             decrypted += decrypted_digraph\r\n         else:\r\n             print(f\"Rectangle: {letter1} and {letter2}\")\r\n             decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n-            decrypted_digraph.strip(\"X\")\r\n+            decrypted_digraph.replace(\"X\", \"\")\r\n             print(decrypted_digraph)\r\n             decrypted += decrypted_digraph\r\n \r\n     print(decrypted)\r\n"
                },
                {
                    "date": 1719532850450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,57 @@\n+message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+\r\n+grid = [\r\n+    ['S','U','P','E','R'],\r\n+    ['Y','A','B','C','D'],\r\n+    ['F','G','H','I','K'],\r\n+    ['L','M','N','O','Q'],\r\n+    ['T','V','W','X','Z']\r\n+]\r\n+\r\n+def main():\r\n+    decrypted = \"\"\r\n+\r\n+    # Edgecases: wrap around\r\n+\r\n+    for digraph_point in range(0, len(message), 2):\r\n+        letter1 = message[digraph_point]\r\n+        letter2 = message[digraph_point+1]\r\n+\r\n+        letter1_row = -1\r\n+        letter1_col = -1\r\n+        letter2_row = -1\r\n+        letter2_col = -1\r\n+        \r\n+        for rIndex, row in enumerate(grid):\r\n+            if letter1 in row:\r\n+                letter1_row = rIndex\r\n+                letter1_col = row.index(letter1)\r\n+            if letter2 in row:\r\n+                letter2_row = rIndex\r\n+                letter2_col = row.index(letter2)\r\n+        \r\n+        if letter1_row == letter2_row:\r\n+            # print(f\"Same row: {letter1} and {letter2}\")\r\n+            print(f\"Same row: {letter1} and {letter2}\")\r\n+            decrypted_digraph1 = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n+            decrypted_digraph1.replace(\"X\", \"\")\r\n+            print(decrypted_digraph1)\r\n+            decrypted += decrypted_digraph1\r\n+            # decrypted_digraph = grid[letter1_row][grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n+        elif letter1_col == letter2_col:\r\n+            print(f\"Same column: {letter1} and {letter2}\")\r\n+            decrypted_digraph2 = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n+            decrypted_digraph2.replace(\"X\", \"\")\r\n+            print(decrypted_digraph2)\r\n+            decrypted += decrypted_digraph2\r\n+        else:\r\n+            print(f\"Rectangle: {letter1} and {letter2}\")\r\n+            decrypted_digraph3 = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n+            decrypted_digraph3.replace(\"X\", \"\")\r\n+            print(decrypted_digraph3)\r\n+            decrypted += decrypted_digraph3\r\n+\r\n+    print(decrypted)\r\n+    return decrypted\r\n+\r\n+main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719532870771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,57 @@\n+message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+\r\n+grid = [\r\n+    ['S','U','P','E','R'],\r\n+    ['Y','A','B','C','D'],\r\n+    ['F','G','H','I','K'],\r\n+    ['L','M','N','O','Q'],\r\n+    ['T','V','W','X','Z']\r\n+]\r\n+\r\n+def main():\r\n+    decrypted = \"\"\r\n+\r\n+    # Edgecases: wrap around\r\n+\r\n+    for digraph_point in range(0, len(message), 2):\r\n+        letter1 = message[digraph_point]\r\n+        letter2 = message[digraph_point+1]\r\n+\r\n+        letter1_row = -1\r\n+        letter1_col = -1\r\n+        letter2_row = -1\r\n+        letter2_col = -1\r\n+        \r\n+        for rIndex, row in enumerate(grid):\r\n+            if letter1 in row:\r\n+                letter1_row = rIndex\r\n+                letter1_col = row.index(letter1)\r\n+            if letter2 in row:\r\n+                letter2_row = rIndex\r\n+                letter2_col = row.index(letter2)\r\n+        \r\n+        if letter1_row == letter2_row:\r\n+            # print(f\"Same row: {letter1} and {letter2}\")\r\n+            print(f\"Same row: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n+            decrypted_digraph.replace(\"X\", \"\")\r\n+            print(decrypted_digraph)\r\n+            decrypted += decrypted_digraph\r\n+            # decrypted_digraph = grid[letter1_row][grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n+        elif letter1_col == letter2_col:\r\n+            print(f\"Same column: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n+            decrypted_digraph.replace(\"X\", \"\")\r\n+            print(decrypted_digraph)\r\n+            decrypted += decrypted_digraph\r\n+        else:\r\n+            print(f\"Rectangle: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n+            decrypted_digraph.replace(\"X\", \"\")\r\n+            print(decrypted_digraph)\r\n+            decrypted += decrypted_digraph\r\n+\r\n+    print(decrypted)\r\n+    return decrypted\r\n+\r\n+main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719533032502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,55 @@\n+message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+\r\n+grid = [\r\n+    ['S','U','P','E','R'],\r\n+    ['Y','A','B','C','D'],\r\n+    ['F','G','H','I','K'],\r\n+    ['L','M','N','O','Q'],\r\n+    ['T','V','W','X','Z']\r\n+]\r\n+\r\n+def main():\r\n+    decrypted = \"\"\r\n+\r\n+    # Edgecases: wrap around\r\n+\r\n+    for digraph_point in range(0, len(message), 2):\r\n+        letter1 = message[digraph_point]\r\n+        letter2 = message[digraph_point+1]\r\n+\r\n+        letter1_row = -1\r\n+        letter1_col = -1\r\n+        letter2_row = -1\r\n+        letter2_col = -1\r\n+        \r\n+        for rIndex, row in enumerate(grid):\r\n+            if letter1 in row:\r\n+                letter1_row = rIndex\r\n+                letter1_col = row.index(letter1)\r\n+            if letter2 in row:\r\n+                letter2_row = rIndex\r\n+                letter2_col = row.index(letter2)\r\n+        \r\n+        if letter1_row == letter2_row:\r\n+            print(f\"Same row: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n+            decrypted_digraph = decrypted_digraph.replace(\"X\", \"\")\r\n+            print(decrypted_digraph)\r\n+            decrypted += decrypted_digraph\r\n+        elif letter1_col == letter2_col:\r\n+            print(f\"Same column: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n+            decrypted_digraph = decrypted_digraph.replace(\"X\", \"\")\r\n+            print(decrypted_digraph)\r\n+            decrypted += decrypted_digraph\r\n+        else:\r\n+            print(f\"Rectangle: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n+            decrypted_digraph = decrypted_digraph.replace(\"X\", \"\")\r\n+            print(decrypted_digraph)\r\n+            decrypted += decrypted_digraph\r\n+\r\n+    print(decrypted)\r\n+    return decrypted\r\n+\r\n+main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719533155161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,197 +30,22 @@\n                 letter2_row = rIndex\r\n                 letter2_col = row.index(letter2)\r\n         \r\n         if letter1_row == letter2_row:\r\n-            print(f\"Same row: {letter1} and {letter2}\")\r\n+            # print(f\"Same row: {letter1} and {letter2}\")\r\n             decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n             decrypted_digraph = decrypted_digraph.replace(\"X\", \"\")\r\n-            print(decrypted_digraph)\r\n             decrypted += decrypted_digraph\r\n         elif letter1_col == letter2_col:\r\n-            print(f\"Same column: {letter1} and {letter2}\")\r\n+            # print(f\"Same column: {letter1} and {letter2}\")\r\n             decrypted_digraph = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n             decrypted_digraph = decrypted_digraph.replace(\"X\", \"\")\r\n-            print(decrypted_digraph)\r\n             decrypted += decrypted_digraph\r\n         else:\r\n-            print(f\"Rectangle: {letter1} and {letter2}\")\r\n+            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n             decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n             decrypted_digraph = decrypted_digraph.replace(\"X\", \"\")\r\n-            print(decrypted_digraph)\r\n             decrypted += decrypted_digraph\r\n \r\n-    print(decrypted)\r\n     return decrypted\r\n \r\n-main()\n-message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-\r\n-grid = [\r\n-    ['S','U','P','E','R'],\r\n-    ['Y','A','B','C','D'],\r\n-    ['F','G','H','I','K'],\r\n-    ['L','M','N','O','Q'],\r\n-    ['T','V','W','X','Z']\r\n-]\r\n-\r\n-def main():\r\n-    decrypted = \"\"\r\n-\r\n-    # Edgecases: wrap around\r\n-\r\n-    for digraph_point in range(0, len(message), 2):\r\n-        letter1 = message[digraph_point]\r\n-        letter2 = message[digraph_point+1]\r\n-\r\n-        letter1_row = -1\r\n-        letter1_col = -1\r\n-        letter2_row = -1\r\n-        letter2_col = -1\r\n-        \r\n-        for rIndex, row in enumerate(grid):\r\n-            if letter1 in row:\r\n-                letter1_row = rIndex\r\n-                letter1_col = row.index(letter1)\r\n-            if letter2 in row:\r\n-                letter2_row = rIndex\r\n-                letter2_col = row.index(letter2)\r\n-        \r\n-        if letter1_row == letter2_row:\r\n-            # print(f\"Same row: {letter1} and {letter2}\")\r\n-            print(f\"Same row: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n-            decrypted_digraph.replace(\"X\", \"\")\r\n-            print(decrypted_digraph)\r\n-            decrypted += decrypted_digraph\r\n-            # decrypted_digraph = grid[letter1_row][grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n-        elif letter1_col == letter2_col:\r\n-            print(f\"Same column: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n-            decrypted_digraph.replace(\"X\", \"\")\r\n-            print(decrypted_digraph)\r\n-            decrypted += decrypted_digraph\r\n-        else:\r\n-            print(f\"Rectangle: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n-            decrypted_digraph.replace(\"X\", \"\")\r\n-            print(decrypted_digraph)\r\n-            decrypted += decrypted_digraph\r\n-\r\n-    print(decrypted)\r\n-    return decrypted\r\n-\r\n-main()\n-message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-\r\n-grid = [\r\n-    ['S','U','P','E','R'],\r\n-    ['Y','A','B','C','D'],\r\n-    ['F','G','H','I','K'],\r\n-    ['L','M','N','O','Q'],\r\n-    ['T','V','W','X','Z']\r\n-]\r\n-\r\n-def main():\r\n-    decrypted = \"\"\r\n-\r\n-    # Edgecases: wrap around\r\n-\r\n-    for digraph_point in range(0, len(message), 2):\r\n-        letter1 = message[digraph_point]\r\n-        letter2 = message[digraph_point+1]\r\n-\r\n-        letter1_row = -1\r\n-        letter1_col = -1\r\n-        letter2_row = -1\r\n-        letter2_col = -1\r\n-        \r\n-        for rIndex, row in enumerate(grid):\r\n-            if letter1 in row:\r\n-                letter1_row = rIndex\r\n-                letter1_col = row.index(letter1)\r\n-            if letter2 in row:\r\n-                letter2_row = rIndex\r\n-                letter2_col = row.index(letter2)\r\n-        \r\n-        if letter1_row == letter2_row:\r\n-            # print(f\"Same row: {letter1} and {letter2}\")\r\n-            print(f\"Same row: {letter1} and {letter2}\")\r\n-            decrypted_digraph1 = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n-            decrypted_digraph1.replace(\"X\", \"\")\r\n-            print(decrypted_digraph1)\r\n-            decrypted += decrypted_digraph1\r\n-            # decrypted_digraph = grid[letter1_row][grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n-        elif letter1_col == letter2_col:\r\n-            print(f\"Same column: {letter1} and {letter2}\")\r\n-            decrypted_digraph2 = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n-            decrypted_digraph2.replace(\"X\", \"\")\r\n-            print(decrypted_digraph2)\r\n-            decrypted += decrypted_digraph2\r\n-        else:\r\n-            print(f\"Rectangle: {letter1} and {letter2}\")\r\n-            decrypted_digraph3 = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n-            decrypted_digraph3.replace(\"X\", \"\")\r\n-            print(decrypted_digraph3)\r\n-            decrypted += decrypted_digraph3\r\n-\r\n-    print(decrypted)\r\n-    return decrypted\r\n-\r\n-main()\n-message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-\r\n-grid = [\r\n-    ['S','U','P','E','R'],\r\n-    ['Y','A','B','C','D'],\r\n-    ['F','G','H','I','K'],\r\n-    ['L','M','N','O','Q'],\r\n-    ['T','V','W','X','Z']\r\n-]\r\n-\r\n-def main():\r\n-    decrypted = \"\"\r\n-\r\n-    # Edgecases: wrap around\r\n-\r\n-    for digraph_point in range(0, len(message), 2):\r\n-        letter1 = message[digraph_point]\r\n-        letter2 = message[digraph_point+1]\r\n-\r\n-        letter1_row = -1\r\n-        letter1_col = -1\r\n-        letter2_row = -1\r\n-        letter2_col = -1\r\n-        \r\n-        for rIndex, row in enumerate(grid):\r\n-            if letter1 in row:\r\n-                letter1_row = rIndex\r\n-                letter1_col = row.index(letter1)\r\n-            if letter2 in row:\r\n-                letter2_row = rIndex\r\n-                letter2_col = row.index(letter2)\r\n-        \r\n-        if letter1_row == letter2_row:\r\n-            # print(f\"Same row: {letter1} and {letter2}\")\r\n-            print(f\"Same row: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n-            decrypted_digraph.replace(\"X\", \"\")\r\n-            print(decrypted_digraph)\r\n-            decrypted += decrypted_digraph\r\n-            # decrypted_digraph = grid[letter1_row][grid.index(message[digraph_point])] + grid[grid.index(message[digraph_point+1])]\r\n-        elif letter1_col == letter2_col:\r\n-            print(f\"Same column: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n-            decrypted_digraph.replace(\"X\", \"\")\r\n-            print(decrypted_digraph)\r\n-            decrypted += decrypted_digraph\r\n-        else:\r\n-            print(f\"Rectangle: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n-            decrypted_digraph.replace(\"X\", \"\")\r\n-            print(decrypted_digraph)\r\n-            decrypted += decrypted_digraph\r\n-\r\n-    print(decrypted)\r\n-    return decrypted\r\n-\r\n main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719533166668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,5 +47,5 @@\n             decrypted += decrypted_digraph\r\n \r\n     return decrypted\r\n \r\n-main()\n\\ No newline at end of file\n+# main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719533648246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,8 @@\n             # print(f\"Rectangle: {letter1} and {letter2}\")\r\n             decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n             decrypted_digraph = decrypted_digraph.replace(\"X\", \"\")\r\n             decrypted += decrypted_digraph\r\n-\r\n+    print(decrypted)\r\n     return decrypted\r\n \r\n # main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719533667988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,51 @@\n+message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+\r\n+grid = [\r\n+    ['S','U','P','E','R'],\r\n+    ['Y','A','B','C','D'],\r\n+    ['F','G','H','I','K'],\r\n+    ['L','M','N','O','Q'],\r\n+    ['T','V','W','X','Z']\r\n+]\r\n+\r\n+def main():\r\n+    decrypted = \"\"\r\n+\r\n+    # Edgecases: wrap around\r\n+\r\n+    for digraph_point in range(0, len(message), 2):\r\n+        letter1 = message[digraph_point]\r\n+        letter2 = message[digraph_point+1]\r\n+\r\n+        letter1_row = -1\r\n+        letter1_col = -1\r\n+        letter2_row = -1\r\n+        letter2_col = -1\r\n+        \r\n+        for rIndex, row in enumerate(grid):\r\n+            if letter1 in row:\r\n+                letter1_row = rIndex\r\n+                letter1_col = row.index(letter1)\r\n+            if letter2 in row:\r\n+                letter2_row = rIndex\r\n+                letter2_col = row.index(letter2)\r\n+        \r\n+        if letter1_row == letter2_row:\r\n+            # print(f\"Same row: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n+            decrypted_digraph = decrypted_digraph.replace(\"X\", \"\")\r\n+            decrypted += decrypted_digraph\r\n+        elif letter1_col == letter2_col:\r\n+            # print(f\"Same column: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n+            decrypted_digraph = decrypted_digraph.replace(\"X\", \"\")\r\n+            decrypted += decrypted_digraph\r\n+        else:\r\n+            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n+            decrypted_digraph = decrypted_digraph.replace(\"X\", \"\")\r\n+            decrypted += decrypted_digraph\r\n+    print(decrypted)\r\n+    # return decrypted\r\n+\r\n+# main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719533778705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,53 @@\n+#!/usr/bin/env python3\r\n+\r\n+message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+\r\n+grid = [\r\n+    ['S','U','P','E','R'],\r\n+    ['Y','A','B','C','D'],\r\n+    ['F','G','H','I','K'],\r\n+    ['L','M','N','O','Q'],\r\n+    ['T','V','W','X','Z']\r\n+]\r\n+\r\n+def main():\r\n+    decrypted = \"\"\r\n+\r\n+    # Edgecases: wrap around\r\n+\r\n+    for digraph_point in range(0, len(message), 2):\r\n+        letter1 = message[digraph_point]\r\n+        letter2 = message[digraph_point+1]\r\n+\r\n+        letter1_row = -1\r\n+        letter1_col = -1\r\n+        letter2_row = -1\r\n+        letter2_col = -1\r\n+        \r\n+        for rIndex, row in enumerate(grid):\r\n+            if letter1 in row:\r\n+                letter1_row = rIndex\r\n+                letter1_col = row.index(letter1)\r\n+            if letter2 in row:\r\n+                letter2_row = rIndex\r\n+                letter2_col = row.index(letter2)\r\n+        \r\n+        if letter1_row == letter2_row:\r\n+            # print(f\"Same row: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n+            decrypted_digraph = decrypted_digraph.replace(\"X\", \"\")\r\n+            decrypted += decrypted_digraph\r\n+        elif letter1_col == letter2_col:\r\n+            # print(f\"Same column: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n+            decrypted_digraph = decrypted_digraph.replace(\"X\", \"\")\r\n+            decrypted += decrypted_digraph\r\n+        else:\r\n+            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n+            decrypted_digraph = decrypted_digraph.replace(\"X\", \"\")\r\n+            decrypted += decrypted_digraph\r\n+    print(decrypted)\r\n+    # return decrypted\r\n+\r\n+# main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719533978779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,107 +49,5 @@\n             decrypted += decrypted_digraph\r\n     print(decrypted)\r\n     # return decrypted\r\n \r\n-# main()\n-message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-\r\n-grid = [\r\n-    ['S','U','P','E','R'],\r\n-    ['Y','A','B','C','D'],\r\n-    ['F','G','H','I','K'],\r\n-    ['L','M','N','O','Q'],\r\n-    ['T','V','W','X','Z']\r\n-]\r\n-\r\n-def main():\r\n-    decrypted = \"\"\r\n-\r\n-    # Edgecases: wrap around\r\n-\r\n-    for digraph_point in range(0, len(message), 2):\r\n-        letter1 = message[digraph_point]\r\n-        letter2 = message[digraph_point+1]\r\n-\r\n-        letter1_row = -1\r\n-        letter1_col = -1\r\n-        letter2_row = -1\r\n-        letter2_col = -1\r\n-        \r\n-        for rIndex, row in enumerate(grid):\r\n-            if letter1 in row:\r\n-                letter1_row = rIndex\r\n-                letter1_col = row.index(letter1)\r\n-            if letter2 in row:\r\n-                letter2_row = rIndex\r\n-                letter2_col = row.index(letter2)\r\n-        \r\n-        if letter1_row == letter2_row:\r\n-            # print(f\"Same row: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n-            decrypted_digraph = decrypted_digraph.replace(\"X\", \"\")\r\n-            decrypted += decrypted_digraph\r\n-        elif letter1_col == letter2_col:\r\n-            # print(f\"Same column: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n-            decrypted_digraph = decrypted_digraph.replace(\"X\", \"\")\r\n-            decrypted += decrypted_digraph\r\n-        else:\r\n-            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n-            decrypted_digraph = decrypted_digraph.replace(\"X\", \"\")\r\n-            decrypted += decrypted_digraph\r\n-    print(decrypted)\r\n-    # return decrypted\r\n-\r\n-# main()\n-message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-\r\n-grid = [\r\n-    ['S','U','P','E','R'],\r\n-    ['Y','A','B','C','D'],\r\n-    ['F','G','H','I','K'],\r\n-    ['L','M','N','O','Q'],\r\n-    ['T','V','W','X','Z']\r\n-]\r\n-\r\n-def main():\r\n-    decrypted = \"\"\r\n-\r\n-    # Edgecases: wrap around\r\n-\r\n-    for digraph_point in range(0, len(message), 2):\r\n-        letter1 = message[digraph_point]\r\n-        letter2 = message[digraph_point+1]\r\n-\r\n-        letter1_row = -1\r\n-        letter1_col = -1\r\n-        letter2_row = -1\r\n-        letter2_col = -1\r\n-        \r\n-        for rIndex, row in enumerate(grid):\r\n-            if letter1 in row:\r\n-                letter1_row = rIndex\r\n-                letter1_col = row.index(letter1)\r\n-            if letter2 in row:\r\n-                letter2_row = rIndex\r\n-                letter2_col = row.index(letter2)\r\n-        \r\n-        if letter1_row == letter2_row:\r\n-            # print(f\"Same row: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n-            decrypted_digraph = decrypted_digraph.replace(\"X\", \"\")\r\n-            decrypted += decrypted_digraph\r\n-        elif letter1_col == letter2_col:\r\n-            # print(f\"Same column: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n-            decrypted_digraph = decrypted_digraph.replace(\"X\", \"\")\r\n-            decrypted += decrypted_digraph\r\n-        else:\r\n-            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n-            decrypted_digraph = decrypted_digraph.replace(\"X\", \"\")\r\n-            decrypted += decrypted_digraph\r\n-    print(decrypted)\r\n-    return decrypted\r\n-\r\n-# main()\n\\ No newline at end of file\n+main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719534012365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,7 +47,7 @@\n             decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n             decrypted_digraph = decrypted_digraph.replace(\"X\", \"\")\r\n             decrypted += decrypted_digraph\r\n     print(decrypted)\r\n-    # return decrypted\r\n+    return decrypted\r\n \r\n main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719534028250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,8 +46,8 @@\n             # print(f\"Rectangle: {letter1} and {letter2}\")\r\n             decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n             decrypted_digraph = decrypted_digraph.replace(\"X\", \"\")\r\n             decrypted += decrypted_digraph\r\n-    print(decrypted)\r\n+    # print(decrypted)\r\n     return decrypted\r\n \r\n main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719534037980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,8 +46,8 @@\n             # print(f\"Rectangle: {letter1} and {letter2}\")\r\n             decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n             decrypted_digraph = decrypted_digraph.replace(\"X\", \"\")\r\n             decrypted += decrypted_digraph\r\n-    # print(decrypted)\r\n+    print(decrypted)\r\n     return decrypted\r\n \r\n main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719534134448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,20 +34,21 @@\n         \r\n         if letter1_row == letter2_row:\r\n             # print(f\"Same row: {letter1} and {letter2}\")\r\n             decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n-            decrypted_digraph = decrypted_digraph.replace(\"X\", \"\")\r\n+            # decrypted_digraph = decrypted_digraph.replace(\"X\", \"\")\r\n             decrypted += decrypted_digraph\r\n         elif letter1_col == letter2_col:\r\n             # print(f\"Same column: {letter1} and {letter2}\")\r\n             decrypted_digraph = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n-            decrypted_digraph = decrypted_digraph.replace(\"X\", \"\")\r\n+            # decrypted_digraph = decrypted_digraph.replace(\"X\", \"\")\r\n             decrypted += decrypted_digraph\r\n         else:\r\n             # print(f\"Rectangle: {letter1} and {letter2}\")\r\n             decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n-            decrypted_digraph = decrypted_digraph.replace(\"X\", \"\")\r\n+            # decrypted_digraph = decrypted_digraph.replace(\"X\", \"\")\r\n             decrypted += decrypted_digraph\r\n+    decrypted = decrypted.replace(\"X\", \"\")\r\n     print(decrypted)\r\n     return decrypted\r\n \r\n main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719534456600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n \r\n def main():\r\n     decrypted = \"\"\r\n \r\n+    # Constraints: remove 'X', remove special chars, remove spaces\r\n     # Edgecases: wrap around\r\n \r\n     for digraph_point in range(0, len(message), 2):\r\n         letter1 = message[digraph_point]\r\n@@ -34,19 +35,16 @@\n         \r\n         if letter1_row == letter2_row:\r\n             # print(f\"Same row: {letter1} and {letter2}\")\r\n             decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n-            # decrypted_digraph = decrypted_digraph.replace(\"X\", \"\")\r\n             decrypted += decrypted_digraph\r\n         elif letter1_col == letter2_col:\r\n             # print(f\"Same column: {letter1} and {letter2}\")\r\n             decrypted_digraph = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n-            # decrypted_digraph = decrypted_digraph.replace(\"X\", \"\")\r\n             decrypted += decrypted_digraph\r\n         else:\r\n             # print(f\"Rectangle: {letter1} and {letter2}\")\r\n             decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n-            # decrypted_digraph = decrypted_digraph.replace(\"X\", \"\")\r\n             decrypted += decrypted_digraph\r\n     decrypted = decrypted.replace(\"X\", \"\")\r\n     print(decrypted)\r\n     return decrypted\r\n"
                },
                {
                    "date": 1719534715645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n #!/usr/bin/env python3\r\n \r\n-message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+message = \"RDEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n \r\n grid = [\r\n     ['S','U','P','E','R'],\r\n     ['Y','A','B','C','D'],\r\n"
                },
                {
                    "date": 1719534848932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n #!/usr/bin/env python3\r\n \r\n-message = \"RDEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n \r\n grid = [\r\n     ['S','U','P','E','R'],\r\n     ['Y','A','B','C','D'],\r\n"
                },
                {
                    "date": 1719534864110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,52 @@\n+#!/usr/bin/env python3\r\n+\r\n+message = \"SUEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+\r\n+grid = [\r\n+    ['S','U','P','E','R'],\r\n+    ['Y','A','B','C','D'],\r\n+    ['F','G','H','I','K'],\r\n+    ['L','M','N','O','Q'],\r\n+    ['T','V','W','X','Z']\r\n+]\r\n+\r\n+def main():\r\n+    decrypted = \"\"\r\n+\r\n+    # Constraints: remove 'X', remove special chars, remove spaces\r\n+    # Edgecases: wrap around\r\n+\r\n+    for digraph_point in range(0, len(message), 2):\r\n+        letter1 = message[digraph_point]\r\n+        letter2 = message[digraph_point+1]\r\n+\r\n+        letter1_row = -1\r\n+        letter1_col = -1\r\n+        letter2_row = -1\r\n+        letter2_col = -1\r\n+        \r\n+        for rIndex, row in enumerate(grid):\r\n+            if letter1 in row:\r\n+                letter1_row = rIndex\r\n+                letter1_col = row.index(letter1)\r\n+            if letter2 in row:\r\n+                letter2_row = rIndex\r\n+                letter2_col = row.index(letter2)\r\n+        \r\n+        if letter1_row == letter2_row:\r\n+            # print(f\"Same row: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n+            decrypted += decrypted_digraph\r\n+        elif letter1_col == letter2_col:\r\n+            # print(f\"Same column: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n+            decrypted += decrypted_digraph\r\n+        else:\r\n+            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n+            decrypted += decrypted_digraph\r\n+    decrypted = decrypted.replace(\"X\", \"\")\r\n+    print(decrypted)\r\n+    return decrypted\r\n+\r\n+main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719534872160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,58 +1,6 @@\n #!/usr/bin/env python3\r\n \r\n-message = \"SUEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-\r\n-grid = [\r\n-    ['S','U','P','E','R'],\r\n-    ['Y','A','B','C','D'],\r\n-    ['F','G','H','I','K'],\r\n-    ['L','M','N','O','Q'],\r\n-    ['T','V','W','X','Z']\r\n-]\r\n-\r\n-def main():\r\n-    decrypted = \"\"\r\n-\r\n-    # Constraints: remove 'X', remove special chars, remove spaces\r\n-    # Edgecases: wrap around\r\n-\r\n-    for digraph_point in range(0, len(message), 2):\r\n-        letter1 = message[digraph_point]\r\n-        letter2 = message[digraph_point+1]\r\n-\r\n-        letter1_row = -1\r\n-        letter1_col = -1\r\n-        letter2_row = -1\r\n-        letter2_col = -1\r\n-        \r\n-        for rIndex, row in enumerate(grid):\r\n-            if letter1 in row:\r\n-                letter1_row = rIndex\r\n-                letter1_col = row.index(letter1)\r\n-            if letter2 in row:\r\n-                letter2_row = rIndex\r\n-                letter2_col = row.index(letter2)\r\n-        \r\n-        if letter1_row == letter2_row:\r\n-            # print(f\"Same row: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n-            decrypted += decrypted_digraph\r\n-        elif letter1_col == letter2_col:\r\n-            # print(f\"Same column: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n-            decrypted += decrypted_digraph\r\n-        else:\r\n-            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n-            decrypted += decrypted_digraph\r\n-    decrypted = decrypted.replace(\"X\", \"\")\r\n-    print(decrypted)\r\n-    return decrypted\r\n-\r\n-main()\n-#!/usr/bin/env python3\r\n-\r\n message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n \r\n grid = [\r\n     ['S','U','P','E','R'],\r\n"
                },
                {
                    "date": 1719534903332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n def main():\r\n     decrypted = \"\"\r\n \r\n     # Constraints: remove 'X', remove special chars, remove spaces\r\n-    # Edgecases: wrap around\r\n+    # Edgecases: must wrap around edges if necessary\r\n \r\n     for digraph_point in range(0, len(message), 2):\r\n         letter1 = message[digraph_point]\r\n         letter2 = message[digraph_point+1]\r\n"
                },
                {
                    "date": 1719534975564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,52 @@\n+#!/usr/bin/env python3\r\n+\r\n+message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+\r\n+grid = [\r\n+    ['S','U','P','E','R'],\r\n+    ['Y','A','B','C','D'],\r\n+    ['F','G','H','I','K'],\r\n+    ['L','M','N','O','Q'],\r\n+    ['T','V','W','X','Z']\r\n+]\r\n+\r\n+def main():\r\n+    decrypted = \"\"\r\n+\r\n+    # Constraints: remove 'X', remove special chars, remove spaces\r\n+    # Edgecases: must wrap around edges if necessary (automatically handled with negative indexing)\r\n+\r\n+    for digraph_point in range(0, len(message), 2):\r\n+        letter1 = message[digraph_point]\r\n+        letter2 = message[digraph_point+1]\r\n+\r\n+        letter1_row = -1\r\n+        letter1_col = -1\r\n+        letter2_row = -1\r\n+        letter2_col = -1\r\n+        \r\n+        for rIndex, row in enumerate(grid):\r\n+            if letter1 in row:\r\n+                letter1_row = rIndex\r\n+                letter1_col = row.index(letter1)\r\n+            if letter2 in row:\r\n+                letter2_row = rIndex\r\n+                letter2_col = row.index(letter2)\r\n+        \r\n+        if letter1_row == letter2_row:\r\n+            # print(f\"Same row: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n+            decrypted += decrypted_digraph\r\n+        elif letter1_col == letter2_col:\r\n+            # print(f\"Same column: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n+            decrypted += decrypted_digraph\r\n+        else:\r\n+            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n+            decrypted += decrypted_digraph\r\n+    decrypted = decrypted.replace(\"X\", \"\")\r\n+    print(decrypted)\r\n+    return decrypted\r\n+\r\n+main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719535453632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,84 @@\n+#!/usr/bin/env python3\r\n+\r\n+message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+\r\n+# grid = [\r\n+#     ['S','U','P','E','R'],\r\n+#     ['Y','A','B','C','D'],\r\n+#     ['F','G','H','I','K'],\r\n+#     ['L','M','N','O','Q'],\r\n+#     ['T','V','W','X','Z']\r\n+# ]\r\n+\r\n+def generate_grid(key):\r\n+    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\"  # 'J' is omitted\r\n+    key = key.upper().replace('J', 'I')  # Replace 'J' with 'I' if necessary\r\n+    key_grid = []\r\n+    \r\n+    # Add key letters to the grid, skipping duplicates\r\n+    for char in key:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    # Add the rest of the alphabet to the grid\r\n+    for char in alphabet:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    # Create 5x5 grid\r\n+    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n+    \r\n+    return grid\r\n+\r\n+def decrypt_message():\r\n+    decrypted = \"\"\r\n+\r\n+    # Constraints: remove 'X', remove special chars, remove spaces\r\n+    # Edgecases: must wrap around edges if necessary (automatically handled with negative indexing)\r\n+\r\n+    for digraph_point in range(0, len(message), 2):\r\n+        letter1 = message[digraph_point]\r\n+        letter2 = message[digraph_point+1]\r\n+\r\n+        letter1_row = -1\r\n+        letter1_col = -1\r\n+        letter2_row = -1\r\n+        letter2_col = -1\r\n+        \r\n+        for rIndex, row in enumerate(grid):\r\n+            if letter1 in row:\r\n+                letter1_row = rIndex\r\n+                letter1_col = row.index(letter1)\r\n+            if letter2 in row:\r\n+                letter2_row = rIndex\r\n+                letter2_col = row.index(letter2)\r\n+        \r\n+        if letter1_row == letter2_row:\r\n+            # print(f\"Same row: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n+            decrypted += decrypted_digraph\r\n+        elif letter1_col == letter2_col:\r\n+            # print(f\"Same column: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n+            decrypted += decrypted_digraph\r\n+        else:\r\n+            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n+            decrypted += decrypted_digraph\r\n+    decrypted = decrypted.replace(\"X\", \"\")\r\n+    print(decrypted)\r\n+    return decrypted\r\n+\r\n+def main():\r\n+    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+    key = \"SUPERSPY\"\r\n+    \r\n+    grid = generate_grid(key)\r\n+    \r\n+    for row in grid:\r\n+        print(' '.join(row))\r\n+    \r\n+    decrypted_message = decrypt_message(message, grid)\r\n+    return decrypted_message\r\n+\r\n+main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719535460385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,84 @@\n+#!/usr/bin/env python3\r\n+\r\n+message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+\r\n+# grid = [\r\n+#     ['S','U','P','E','R'],\r\n+#     ['Y','A','B','C','D'],\r\n+#     ['F','G','H','I','K'],\r\n+#     ['L','M','N','O','Q'],\r\n+#     ['T','V','W','X','Z']\r\n+# ]\r\n+\r\n+def generate_grid(key):\r\n+    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\"  # 'J' is omitted\r\n+    key = key.upper().replace('J', 'I')  # Replace 'J' with 'I' if necessary\r\n+    key_grid = []\r\n+    \r\n+    # Add key letters to the grid, skipping duplicates\r\n+    for char in key:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    # Add the rest of the alphabet to the grid\r\n+    for char in alphabet:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    # Create 5x5 grid\r\n+    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n+    \r\n+    return grid\r\n+\r\n+def decrypt_message(grid):\r\n+    decrypted = \"\"\r\n+\r\n+    # Constraints: remove 'X', remove special chars, remove spaces\r\n+    # Edgecases: must wrap around edges if necessary (automatically handled with negative indexing)\r\n+\r\n+    for digraph_point in range(0, len(message), 2):\r\n+        letter1 = message[digraph_point]\r\n+        letter2 = message[digraph_point+1]\r\n+\r\n+        letter1_row = -1\r\n+        letter1_col = -1\r\n+        letter2_row = -1\r\n+        letter2_col = -1\r\n+        \r\n+        for rIndex, row in enumerate(grid):\r\n+            if letter1 in row:\r\n+                letter1_row = rIndex\r\n+                letter1_col = row.index(letter1)\r\n+            if letter2 in row:\r\n+                letter2_row = rIndex\r\n+                letter2_col = row.index(letter2)\r\n+        \r\n+        if letter1_row == letter2_row:\r\n+            # print(f\"Same row: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n+            decrypted += decrypted_digraph\r\n+        elif letter1_col == letter2_col:\r\n+            # print(f\"Same column: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n+            decrypted += decrypted_digraph\r\n+        else:\r\n+            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n+            decrypted += decrypted_digraph\r\n+    decrypted = decrypted.replace(\"X\", \"\")\r\n+    print(decrypted)\r\n+    return decrypted\r\n+\r\n+def main():\r\n+    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+    key = \"SUPERSPY\"\r\n+    \r\n+    grid = generate_grid(key)\r\n+    \r\n+    for row in grid:\r\n+        print(' '.join(row))\r\n+    \r\n+    decrypted_message = decrypt_message(message, grid)\r\n+    return decrypted_message\r\n+\r\n+main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719535488332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,84 @@\n+#!/usr/bin/env python3\r\n+\r\n+# message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+\r\n+# grid = [\r\n+#     ['S','U','P','E','R'],\r\n+#     ['Y','A','B','C','D'],\r\n+#     ['F','G','H','I','K'],\r\n+#     ['L','M','N','O','Q'],\r\n+#     ['T','V','W','X','Z']\r\n+# ]\r\n+\r\n+def generate_grid(key):\r\n+    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\"  # 'J' is omitted\r\n+    key = key.upper().replace('J', 'I')  # Replace 'J' with 'I' if necessary\r\n+    key_grid = []\r\n+    \r\n+    # Add key letters to the grid, skipping duplicates\r\n+    for char in key:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    # Add the rest of the alphabet to the grid\r\n+    for char in alphabet:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    # Create 5x5 grid\r\n+    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n+    \r\n+    return grid\r\n+\r\n+def decrypt_message(message, grid):\r\n+    decrypted = \"\"\r\n+\r\n+    # Constraints: remove 'X', remove special chars, remove spaces\r\n+    # Edgecases: must wrap around edges if necessary (automatically handled with negative indexing)\r\n+\r\n+    for digraph_point in range(0, len(message), 2):\r\n+        letter1 = message[digraph_point]\r\n+        letter2 = message[digraph_point+1]\r\n+\r\n+        letter1_row = -1\r\n+        letter1_col = -1\r\n+        letter2_row = -1\r\n+        letter2_col = -1\r\n+        \r\n+        for rIndex, row in enumerate(grid):\r\n+            if letter1 in row:\r\n+                letter1_row = rIndex\r\n+                letter1_col = row.index(letter1)\r\n+            if letter2 in row:\r\n+                letter2_row = rIndex\r\n+                letter2_col = row.index(letter2)\r\n+        \r\n+        if letter1_row == letter2_row:\r\n+            # print(f\"Same row: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n+            decrypted += decrypted_digraph\r\n+        elif letter1_col == letter2_col:\r\n+            # print(f\"Same column: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n+            decrypted += decrypted_digraph\r\n+        else:\r\n+            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n+            decrypted += decrypted_digraph\r\n+    decrypted = decrypted.replace(\"X\", \"\")\r\n+    print(decrypted)\r\n+    return decrypted\r\n+\r\n+def main():\r\n+    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+    key = \"SUPERSPY\"\r\n+    \r\n+    grid = generate_grid(key)\r\n+    \r\n+    for row in grid:\r\n+        print(' '.join(row))\r\n+    \r\n+    decrypted_message = decrypt_message(message, grid)\r\n+    return decrypted_message\r\n+\r\n+main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719535503379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,277 +80,5 @@\n     \r\n     decrypted_message = decrypt_message(message, grid)\r\n     return decrypted_message\r\n \r\n-main()\n-#!/usr/bin/env python3\r\n-\r\n-message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-\r\n-# grid = [\r\n-#     ['S','U','P','E','R'],\r\n-#     ['Y','A','B','C','D'],\r\n-#     ['F','G','H','I','K'],\r\n-#     ['L','M','N','O','Q'],\r\n-#     ['T','V','W','X','Z']\r\n-# ]\r\n-\r\n-def generate_grid(key):\r\n-    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\"  # 'J' is omitted\r\n-    key = key.upper().replace('J', 'I')  # Replace 'J' with 'I' if necessary\r\n-    key_grid = []\r\n-    \r\n-    # Add key letters to the grid, skipping duplicates\r\n-    for char in key:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    # Add the rest of the alphabet to the grid\r\n-    for char in alphabet:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    # Create 5x5 grid\r\n-    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n-    \r\n-    return grid\r\n-\r\n-def decrypt_message(grid):\r\n-    decrypted = \"\"\r\n-\r\n-    # Constraints: remove 'X', remove special chars, remove spaces\r\n-    # Edgecases: must wrap around edges if necessary (automatically handled with negative indexing)\r\n-\r\n-    for digraph_point in range(0, len(message), 2):\r\n-        letter1 = message[digraph_point]\r\n-        letter2 = message[digraph_point+1]\r\n-\r\n-        letter1_row = -1\r\n-        letter1_col = -1\r\n-        letter2_row = -1\r\n-        letter2_col = -1\r\n-        \r\n-        for rIndex, row in enumerate(grid):\r\n-            if letter1 in row:\r\n-                letter1_row = rIndex\r\n-                letter1_col = row.index(letter1)\r\n-            if letter2 in row:\r\n-                letter2_row = rIndex\r\n-                letter2_col = row.index(letter2)\r\n-        \r\n-        if letter1_row == letter2_row:\r\n-            # print(f\"Same row: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n-            decrypted += decrypted_digraph\r\n-        elif letter1_col == letter2_col:\r\n-            # print(f\"Same column: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n-            decrypted += decrypted_digraph\r\n-        else:\r\n-            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n-            decrypted += decrypted_digraph\r\n-    decrypted = decrypted.replace(\"X\", \"\")\r\n-    print(decrypted)\r\n-    return decrypted\r\n-\r\n-def main():\r\n-    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-    key = \"SUPERSPY\"\r\n-    \r\n-    grid = generate_grid(key)\r\n-    \r\n-    for row in grid:\r\n-        print(' '.join(row))\r\n-    \r\n-    decrypted_message = decrypt_message(message, grid)\r\n-    return decrypted_message\r\n-\r\n-main()\n-#!/usr/bin/env python3\r\n-\r\n-message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-\r\n-# grid = [\r\n-#     ['S','U','P','E','R'],\r\n-#     ['Y','A','B','C','D'],\r\n-#     ['F','G','H','I','K'],\r\n-#     ['L','M','N','O','Q'],\r\n-#     ['T','V','W','X','Z']\r\n-# ]\r\n-\r\n-def generate_grid(key):\r\n-    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\"  # 'J' is omitted\r\n-    key = key.upper().replace('J', 'I')  # Replace 'J' with 'I' if necessary\r\n-    key_grid = []\r\n-    \r\n-    # Add key letters to the grid, skipping duplicates\r\n-    for char in key:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    # Add the rest of the alphabet to the grid\r\n-    for char in alphabet:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    # Create 5x5 grid\r\n-    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n-    \r\n-    return grid\r\n-\r\n-def decrypt_message():\r\n-    decrypted = \"\"\r\n-\r\n-    # Constraints: remove 'X', remove special chars, remove spaces\r\n-    # Edgecases: must wrap around edges if necessary (automatically handled with negative indexing)\r\n-\r\n-    for digraph_point in range(0, len(message), 2):\r\n-        letter1 = message[digraph_point]\r\n-        letter2 = message[digraph_point+1]\r\n-\r\n-        letter1_row = -1\r\n-        letter1_col = -1\r\n-        letter2_row = -1\r\n-        letter2_col = -1\r\n-        \r\n-        for rIndex, row in enumerate(grid):\r\n-            if letter1 in row:\r\n-                letter1_row = rIndex\r\n-                letter1_col = row.index(letter1)\r\n-            if letter2 in row:\r\n-                letter2_row = rIndex\r\n-                letter2_col = row.index(letter2)\r\n-        \r\n-        if letter1_row == letter2_row:\r\n-            # print(f\"Same row: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n-            decrypted += decrypted_digraph\r\n-        elif letter1_col == letter2_col:\r\n-            # print(f\"Same column: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n-            decrypted += decrypted_digraph\r\n-        else:\r\n-            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n-            decrypted += decrypted_digraph\r\n-    decrypted = decrypted.replace(\"X\", \"\")\r\n-    print(decrypted)\r\n-    return decrypted\r\n-\r\n-def main():\r\n-    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-    key = \"SUPERSPY\"\r\n-    \r\n-    grid = generate_grid(key)\r\n-    \r\n-    for row in grid:\r\n-        print(' '.join(row))\r\n-    \r\n-    decrypted_message = decrypt_message(message, grid)\r\n-    return decrypted_message\r\n-\r\n-main()\n-#!/usr/bin/env python3\r\n-\r\n-message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-\r\n-grid = [\r\n-    ['S','U','P','E','R'],\r\n-    ['Y','A','B','C','D'],\r\n-    ['F','G','H','I','K'],\r\n-    ['L','M','N','O','Q'],\r\n-    ['T','V','W','X','Z']\r\n-]\r\n-\r\n-def main():\r\n-    decrypted = \"\"\r\n-\r\n-    # Constraints: remove 'X', remove special chars, remove spaces\r\n-    # Edgecases: must wrap around edges if necessary (automatically handled with negative indexing)\r\n-\r\n-    for digraph_point in range(0, len(message), 2):\r\n-        letter1 = message[digraph_point]\r\n-        letter2 = message[digraph_point+1]\r\n-\r\n-        letter1_row = -1\r\n-        letter1_col = -1\r\n-        letter2_row = -1\r\n-        letter2_col = -1\r\n-        \r\n-        for rIndex, row in enumerate(grid):\r\n-            if letter1 in row:\r\n-                letter1_row = rIndex\r\n-                letter1_col = row.index(letter1)\r\n-            if letter2 in row:\r\n-                letter2_row = rIndex\r\n-                letter2_col = row.index(letter2)\r\n-        \r\n-        if letter1_row == letter2_row:\r\n-            # print(f\"Same row: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n-            decrypted += decrypted_digraph\r\n-        elif letter1_col == letter2_col:\r\n-            # print(f\"Same column: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n-            decrypted += decrypted_digraph\r\n-        else:\r\n-            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n-            decrypted += decrypted_digraph\r\n-    decrypted = decrypted.replace(\"X\", \"\")\r\n-    print(decrypted)\r\n-    return decrypted\r\n-\r\n-main()\n-#!/usr/bin/env python3\r\n-\r\n-message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-\r\n-grid = [\r\n-    ['S','U','P','E','R'],\r\n-    ['Y','A','B','C','D'],\r\n-    ['F','G','H','I','K'],\r\n-    ['L','M','N','O','Q'],\r\n-    ['T','V','W','X','Z']\r\n-]\r\n-\r\n-def main():\r\n-    decrypted = \"\"\r\n-\r\n-    # Constraints: remove 'X', remove special chars, remove spaces\r\n-    # Edgecases: must wrap around edges if necessary\r\n-\r\n-    for digraph_point in range(0, len(message), 2):\r\n-        letter1 = message[digraph_point]\r\n-        letter2 = message[digraph_point+1]\r\n-\r\n-        letter1_row = -1\r\n-        letter1_col = -1\r\n-        letter2_row = -1\r\n-        letter2_col = -1\r\n-        \r\n-        for rIndex, row in enumerate(grid):\r\n-            if letter1 in row:\r\n-                letter1_row = rIndex\r\n-                letter1_col = row.index(letter1)\r\n-            if letter2 in row:\r\n-                letter2_row = rIndex\r\n-                letter2_col = row.index(letter2)\r\n-        \r\n-        if letter1_row == letter2_row:\r\n-            # print(f\"Same row: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n-            decrypted += decrypted_digraph\r\n-        elif letter1_col == letter2_col:\r\n-            # print(f\"Same column: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n-            decrypted += decrypted_digraph\r\n-        else:\r\n-            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n-            decrypted += decrypted_digraph\r\n-    decrypted = decrypted.replace(\"X\", \"\")\r\n-    print(decrypted)\r\n-    return decrypted\r\n-\r\n main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719535543290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,11 +74,9 @@\n     key = \"SUPERSPY\"\r\n     \r\n     grid = generate_grid(key)\r\n     \r\n-    for row in grid:\r\n-        print(' '.join(row))\r\n-    \r\n     decrypted_message = decrypt_message(message, grid)\r\n+    print(decrypted_message)\r\n     return decrypted_message\r\n \r\n main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719535554375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,82 @@\n+#!/usr/bin/env python3\r\n+\r\n+# message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+\r\n+# grid = [\r\n+#     ['S','U','P','E','R'],\r\n+#     ['Y','A','B','C','D'],\r\n+#     ['F','G','H','I','K'],\r\n+#     ['L','M','N','O','Q'],\r\n+#     ['T','V','W','X','Z']\r\n+# ]\r\n+\r\n+def generate_grid(key):\r\n+    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\"  # 'J' is omitted\r\n+    key = key.upper().replace('J', 'I')  # Replace 'J' with 'I' if necessary\r\n+    key_grid = []\r\n+    \r\n+    # Add key letters to the grid, skipping duplicates\r\n+    for char in key:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    # Add the rest of the alphabet to the grid\r\n+    for char in alphabet:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    # Create 5x5 grid\r\n+    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n+    \r\n+    return grid\r\n+\r\n+def decrypt_message(message, grid):\r\n+    decrypted = \"\"\r\n+\r\n+    # Constraints: remove 'X', remove special chars, remove spaces\r\n+    # Edgecases: must wrap around edges if necessary (automatically handled with negative indexing)\r\n+\r\n+    for digraph_point in range(0, len(message), 2):\r\n+        letter1 = message[digraph_point]\r\n+        letter2 = message[digraph_point+1]\r\n+\r\n+        letter1_row = -1\r\n+        letter1_col = -1\r\n+        letter2_row = -1\r\n+        letter2_col = -1\r\n+        \r\n+        for rIndex, row in enumerate(grid):\r\n+            if letter1 in row:\r\n+                letter1_row = rIndex\r\n+                letter1_col = row.index(letter1)\r\n+            if letter2 in row:\r\n+                letter2_row = rIndex\r\n+                letter2_col = row.index(letter2)\r\n+        \r\n+        if letter1_row == letter2_row:\r\n+            # print(f\"Same row: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n+            decrypted += decrypted_digraph\r\n+        elif letter1_col == letter2_col:\r\n+            # print(f\"Same column: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n+            decrypted += decrypted_digraph\r\n+        else:\r\n+            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n+            decrypted += decrypted_digraph\r\n+            \r\n+    decrypted = decrypted.replace(\"X\", \"\")\r\n+    return decrypted\r\n+\r\n+def main():\r\n+    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+    key = \"SUPERSPY\"\r\n+    \r\n+    grid = generate_grid(key)\r\n+    \r\n+    decrypted_message = decrypt_message(message, grid)\r\n+    print(decrypted_message)\r\n+    return decrypted_message\r\n+\r\n+main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719535606752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,14 +64,14 @@\n         else:\r\n             # print(f\"Rectangle: {letter1} and {letter2}\")\r\n             decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n             decrypted += decrypted_digraph\r\n-            \r\n+\r\n     decrypted = decrypted.replace(\"X\", \"\")\r\n     return decrypted\r\n \r\n def main():\r\n-    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+    message = \"FDSNENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n     key = \"SUPERSPY\"\r\n     \r\n     grid = generate_grid(key)\r\n     \r\n"
                },
                {
                    "date": 1719535612692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,95 +64,13 @@\n         else:\r\n             # print(f\"Rectangle: {letter1} and {letter2}\")\r\n             decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n             decrypted += decrypted_digraph\r\n-\r\n+            \r\n     decrypted = decrypted.replace(\"X\", \"\")\r\n     return decrypted\r\n \r\n def main():\r\n-    message = \"FDSNENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-    key = \"SUPERSPY\"\r\n-    \r\n-    grid = generate_grid(key)\r\n-    \r\n-    decrypted_message = decrypt_message(message, grid)\r\n-    print(decrypted_message)\r\n-    return decrypted_message\r\n-\r\n-main()\n-#!/usr/bin/env python3\r\n-\r\n-# message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-\r\n-# grid = [\r\n-#     ['S','U','P','E','R'],\r\n-#     ['Y','A','B','C','D'],\r\n-#     ['F','G','H','I','K'],\r\n-#     ['L','M','N','O','Q'],\r\n-#     ['T','V','W','X','Z']\r\n-# ]\r\n-\r\n-def generate_grid(key):\r\n-    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\"  # 'J' is omitted\r\n-    key = key.upper().replace('J', 'I')  # Replace 'J' with 'I' if necessary\r\n-    key_grid = []\r\n-    \r\n-    # Add key letters to the grid, skipping duplicates\r\n-    for char in key:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    # Add the rest of the alphabet to the grid\r\n-    for char in alphabet:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    # Create 5x5 grid\r\n-    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n-    \r\n-    return grid\r\n-\r\n-def decrypt_message(message, grid):\r\n-    decrypted = \"\"\r\n-\r\n-    # Constraints: remove 'X', remove special chars, remove spaces\r\n-    # Edgecases: must wrap around edges if necessary (automatically handled with negative indexing)\r\n-\r\n-    for digraph_point in range(0, len(message), 2):\r\n-        letter1 = message[digraph_point]\r\n-        letter2 = message[digraph_point+1]\r\n-\r\n-        letter1_row = -1\r\n-        letter1_col = -1\r\n-        letter2_row = -1\r\n-        letter2_col = -1\r\n-        \r\n-        for rIndex, row in enumerate(grid):\r\n-            if letter1 in row:\r\n-                letter1_row = rIndex\r\n-                letter1_col = row.index(letter1)\r\n-            if letter2 in row:\r\n-                letter2_row = rIndex\r\n-                letter2_col = row.index(letter2)\r\n-        \r\n-        if letter1_row == letter2_row:\r\n-            # print(f\"Same row: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n-            decrypted += decrypted_digraph\r\n-        elif letter1_col == letter2_col:\r\n-            # print(f\"Same column: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n-            decrypted += decrypted_digraph\r\n-        else:\r\n-            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n-            decrypted += decrypted_digraph\r\n-    decrypted = decrypted.replace(\"X\", \"\")\r\n-    print(decrypted)\r\n-    return decrypted\r\n-\r\n-def main():\r\n     message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n     key = \"SUPERSPY\"\r\n     \r\n     grid = generate_grid(key)\r\n"
                },
                {
                    "date": 1719535692357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,82 @@\n+#!/usr/bin/env python3\r\n+\r\n+# message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+\r\n+# grid = [\r\n+#     ['S','U','P','E','R'],\r\n+#     ['Y','A','B','C','D'],\r\n+#     ['F','G','H','I','K'],\r\n+#     ['L','M','N','O','Q'],\r\n+#     ['T','V','W','X','Z']\r\n+# ]\r\n+\r\n+def generate_grid(key):\r\n+    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\"  # 'J' is omitted\r\n+    key = key.upper().replace('J', 'I')  # Replace 'J' with 'I' if necessary\r\n+    key_grid = []\r\n+    \r\n+    # Add key letters to the grid, skipping duplicates\r\n+    for char in key:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    # Add the rest of the alphabet to the grid\r\n+    for char in alphabet:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    # Create 5x5 grid\r\n+    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n+    \r\n+    return grid\r\n+\r\n+def decrypt_message(message, grid):\r\n+    decrypted = \"\"\r\n+\r\n+    # Constraints: remove 'X', remove special chars, remove spaces\r\n+    # Edgecases: must wrap around edges if necessary (automatically handled with negative indexing)\r\n+\r\n+    for digraph_point in range(0, len(message), 2):\r\n+        letter1 = message[digraph_point]\r\n+        letter2 = message[digraph_point+1]\r\n+\r\n+        letter1_row = -1\r\n+        letter1_col = -1\r\n+        letter2_row = -1\r\n+        letter2_col = -1\r\n+        \r\n+        for rIndex, row in enumerate(grid):\r\n+            if letter1 in row:\r\n+                letter1_row = rIndex\r\n+                letter1_col = row.index(letter1)\r\n+            if letter2 in row:\r\n+                letter2_row = rIndex\r\n+                letter2_col = row.index(letter2)\r\n+        \r\n+        if letter1_row == letter2_row:\r\n+            # print(f\"Same row: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n+            decrypted += decrypted_digraph\r\n+        elif letter1_col == letter2_col:\r\n+            # print(f\"Same column: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n+            decrypted += decrypted_digraph\r\n+        else:\r\n+            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n+            decrypted += decrypted_digraph\r\n+            \r\n+    decrypted = decrypted.replace(\"X\", \"\")\r\n+    return decrypted\r\n+\r\n+def main():\r\n+    message = \"IPOTMQXNSQBKNXDUSCMECQHOIV\"\r\n+    key = \"SUPERSPY\"\r\n+    \r\n+    grid = generate_grid(key)\r\n+    \r\n+    decrypted_message = decrypt_message(message, grid)\r\n+    print(decrypted_message)\r\n+    return decrypted_message\r\n+\r\n+main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719535743599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,90 +69,8 @@\n     decrypted = decrypted.replace(\"X\", \"\")\r\n     return decrypted\r\n \r\n def main():\r\n-    message = \"IPOTMQXNSQBKNXDUSCMECQHOIV\"\r\n-    key = \"SUPERSPY\"\r\n-    \r\n-    grid = generate_grid(key)\r\n-    \r\n-    decrypted_message = decrypt_message(message, grid)\r\n-    print(decrypted_message)\r\n-    return decrypted_message\r\n-\r\n-main()\n-#!/usr/bin/env python3\r\n-\r\n-# message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-\r\n-# grid = [\r\n-#     ['S','U','P','E','R'],\r\n-#     ['Y','A','B','C','D'],\r\n-#     ['F','G','H','I','K'],\r\n-#     ['L','M','N','O','Q'],\r\n-#     ['T','V','W','X','Z']\r\n-# ]\r\n-\r\n-def generate_grid(key):\r\n-    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\"  # 'J' is omitted\r\n-    key = key.upper().replace('J', 'I')  # Replace 'J' with 'I' if necessary\r\n-    key_grid = []\r\n-    \r\n-    # Add key letters to the grid, skipping duplicates\r\n-    for char in key:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    # Add the rest of the alphabet to the grid\r\n-    for char in alphabet:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    # Create 5x5 grid\r\n-    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n-    \r\n-    return grid\r\n-\r\n-def decrypt_message(message, grid):\r\n-    decrypted = \"\"\r\n-\r\n-    # Constraints: remove 'X', remove special chars, remove spaces\r\n-    # Edgecases: must wrap around edges if necessary (automatically handled with negative indexing)\r\n-\r\n-    for digraph_point in range(0, len(message), 2):\r\n-        letter1 = message[digraph_point]\r\n-        letter2 = message[digraph_point+1]\r\n-\r\n-        letter1_row = -1\r\n-        letter1_col = -1\r\n-        letter2_row = -1\r\n-        letter2_col = -1\r\n-        \r\n-        for rIndex, row in enumerate(grid):\r\n-            if letter1 in row:\r\n-                letter1_row = rIndex\r\n-                letter1_col = row.index(letter1)\r\n-            if letter2 in row:\r\n-                letter2_row = rIndex\r\n-                letter2_col = row.index(letter2)\r\n-        \r\n-        if letter1_row == letter2_row:\r\n-            # print(f\"Same row: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n-            decrypted += decrypted_digraph\r\n-        elif letter1_col == letter2_col:\r\n-            # print(f\"Same column: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n-            decrypted += decrypted_digraph\r\n-        else:\r\n-            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n-            decrypted += decrypted_digraph\r\n-            \r\n-    decrypted = decrypted.replace(\"X\", \"\")\r\n-    return decrypted\r\n-\r\n-def main():\r\n     message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n     key = \"SUPERSPY\"\r\n     \r\n     grid = generate_grid(key)\r\n"
                },
                {
                    "date": 1719535793980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,23 +10,20 @@\n #     ['T','V','W','X','Z']\r\n # ]\r\n \r\n def generate_grid(key):\r\n-    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\"  # 'J' is omitted\r\n-    key = key.upper().replace('J', 'I')  # Replace 'J' with 'I' if necessary\r\n+    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\" # Omit 'J'\r\n+    key = key.upper().replace('J', 'I')\r\n     key_grid = []\r\n     \r\n-    # Add key letters to the grid, skipping duplicates\r\n     for char in key:\r\n         if char not in key_grid:\r\n             key_grid.append(char)\r\n     \r\n-    # Add the rest of the alphabet to the grid\r\n     for char in alphabet:\r\n         if char not in key_grid:\r\n             key_grid.append(char)\r\n     \r\n-    # Create 5x5 grid\r\n     grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n     \r\n     return grid\r\n \r\n"
                },
                {
                    "date": 1719535812114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n     decrypted = decrypted.replace(\"X\", \"\")\r\n     return decrypted\r\n \r\n def main():\r\n-    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+    message = \"IPOTMQOCEZSDXNSQBKNXDUSCMECQHOIV\"\r\n     key = \"SUPERSPY\"\r\n     \r\n     grid = generate_grid(key)\r\n     \r\n"
                },
                {
                    "date": 1719536088150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,76 @@\n+#!/usr/bin/env python3\r\n+\r\n+# message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+\r\n+# grid = [\r\n+#     ['S','U','P','E','R'],\r\n+#     ['Y','A','B','C','D'],\r\n+#     ['F','G','H','I','K'],\r\n+#     ['L','M','N','O','Q'],\r\n+#     ['T','V','W','X','Z']\r\n+# ]\r\n+\r\n+def generate_grid(key):\r\n+    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\"\r\n+    key = key.upper()\r\n+    key_grid = []\r\n+    \r\n+    for char in key:\r\n+        if char not in key_grid and char != 'J':\r\n+            key_grid.append(char)\r\n+    \r\n+    for char in alphabet:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    # Ensure 'I' and 'J' are in the same position for substitution purposes\r\n+    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n+    return grid\r\n+\r\n+def find_position(grid, char):\r\n+    for rIndex, row in enumerate(grid):\r\n+        if char in row:\r\n+            return rIndex, row.index(char)\r\n+    return None, None\r\n+\r\n+def decrypt_message(message, grid):\r\n+    decrypted = \"\"\r\n+\r\n+    for digraph_point in range(0, len(message), 2):\r\n+        letter1 = message[digraph_point]\r\n+        letter2 = message[digraph_point+1]\r\n+\r\n+        letter1_row, letter1_col = find_position(grid, letter1)\r\n+        letter2_row, letter2_col = find_position(grid, letter2)\r\n+        \r\n+        if letter1_row is None or letter2_row is None:\r\n+            continue\r\n+        \r\n+        if letter1_row == letter2_row:\r\n+            decrypted_digraph = grid[letter1_row][(letter1_col-1)%5] + grid[letter2_row][(letter2_col-1)%5]\r\n+        elif letter1_col == letter2_col:\r\n+            decrypted_digraph = grid[(letter1_row-1)%5][letter1_col] + grid[(letter2_row-1)%5][letter2_col]\r\n+        else:\r\n+            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n+        \r\n+        decrypted += decrypted_digraph\r\n+    \r\n+    decrypted = decrypted.replace(\"X\", \"\")\r\n+    return decrypted\r\n+\r\n+def main():\r\n+    message = \"IPOTMQOCEZSDXNSQBKNXDUSCMECQHOIV\"\r\n+    key = \"SUPERSPY\"\r\n+    \r\n+    grid = generate_grid(key)\r\n+    decrypted_message = decrypt_message(message, grid)\r\n+    \r\n+    print(\"Generated Grid:\")\r\n+    for row in grid:\r\n+        print(row)\r\n+    \r\n+    print(\"\\nDecrypted Message:\")\r\n+    print(decrypted_message)\r\n+    return decrypted_message\r\n+\r\n+main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719536096195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,84 +10,8 @@\n #     ['T','V','W','X','Z']\r\n # ]\r\n \r\n def generate_grid(key):\r\n-    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\"\r\n-    key = key.upper()\r\n-    key_grid = []\r\n-    \r\n-    for char in key:\r\n-        if char not in key_grid and char != 'J':\r\n-            key_grid.append(char)\r\n-    \r\n-    for char in alphabet:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    # Ensure 'I' and 'J' are in the same position for substitution purposes\r\n-    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n-    return grid\r\n-\r\n-def find_position(grid, char):\r\n-    for rIndex, row in enumerate(grid):\r\n-        if char in row:\r\n-            return rIndex, row.index(char)\r\n-    return None, None\r\n-\r\n-def decrypt_message(message, grid):\r\n-    decrypted = \"\"\r\n-\r\n-    for digraph_point in range(0, len(message), 2):\r\n-        letter1 = message[digraph_point]\r\n-        letter2 = message[digraph_point+1]\r\n-\r\n-        letter1_row, letter1_col = find_position(grid, letter1)\r\n-        letter2_row, letter2_col = find_position(grid, letter2)\r\n-        \r\n-        if letter1_row is None or letter2_row is None:\r\n-            continue\r\n-        \r\n-        if letter1_row == letter2_row:\r\n-            decrypted_digraph = grid[letter1_row][(letter1_col-1)%5] + grid[letter2_row][(letter2_col-1)%5]\r\n-        elif letter1_col == letter2_col:\r\n-            decrypted_digraph = grid[(letter1_row-1)%5][letter1_col] + grid[(letter2_row-1)%5][letter2_col]\r\n-        else:\r\n-            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n-        \r\n-        decrypted += decrypted_digraph\r\n-    \r\n-    decrypted = decrypted.replace(\"X\", \"\")\r\n-    return decrypted\r\n-\r\n-def main():\r\n-    message = \"IPOTMQOCEZSDXNSQBKNXDUSCMECQHOIV\"\r\n-    key = \"SUPERSPY\"\r\n-    \r\n-    grid = generate_grid(key)\r\n-    decrypted_message = decrypt_message(message, grid)\r\n-    \r\n-    print(\"Generated Grid:\")\r\n-    for row in grid:\r\n-        print(row)\r\n-    \r\n-    print(\"\\nDecrypted Message:\")\r\n-    print(decrypted_message)\r\n-    return decrypted_message\r\n-\r\n-main()\n-#!/usr/bin/env python3\r\n-\r\n-# message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-\r\n-# grid = [\r\n-#     ['S','U','P','E','R'],\r\n-#     ['Y','A','B','C','D'],\r\n-#     ['F','G','H','I','K'],\r\n-#     ['L','M','N','O','Q'],\r\n-#     ['T','V','W','X','Z']\r\n-# ]\r\n-\r\n-def generate_grid(key):\r\n     alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\" # Omit 'J'\r\n     key = key.upper().replace('J', 'I')\r\n     key_grid = []\r\n     \r\n"
                },
                {
                    "date": 1719536102105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n     decrypted = decrypted.replace(\"X\", \"\")\r\n     return decrypted\r\n \r\n def main():\r\n-    message = \"IPOTMQOCEZSDXNSQBKNXDUSCMECQHOIV\"\r\n+    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n     key = \"SUPERSPY\"\r\n     \r\n     grid = generate_grid(key)\r\n     \r\n"
                },
                {
                    "date": 1719536134666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,77 @@\n+#!/usr/bin/env python3\r\n+\r\n+# grid = [\r\n+#     ['S','U','P','E','R'],\r\n+#     ['Y','A','B','C','D'],\r\n+#     ['F','G','H','I','K'],\r\n+#     ['L','M','N','O','Q'],\r\n+#     ['T','V','W','X','Z']\r\n+# ]\r\n+\r\n+def generate_grid(key):\r\n+    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\" # Omit 'J'\r\n+    key = key.upper().replace('J', 'I')\r\n+    key_grid = []\r\n+    \r\n+    for char in key:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    for char in alphabet:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n+    \r\n+    return grid\r\n+\r\n+def decrypt_message(message, grid):\r\n+    decrypted = \"\"\r\n+\r\n+    # Constraints: remove 'X', remove special chars, remove spaces\r\n+    # Edgecases: must wrap around edges if necessary (automatically handled with negative indexing)\r\n+\r\n+    for digraph_point in range(0, len(message), 2):\r\n+        letter1 = message[digraph_point]\r\n+        letter2 = message[digraph_point+1]\r\n+\r\n+        letter1_row = -1\r\n+        letter1_col = -1\r\n+        letter2_row = -1\r\n+        letter2_col = -1\r\n+        \r\n+        for rIndex, row in enumerate(grid):\r\n+            if letter1 in row:\r\n+                letter1_row = rIndex\r\n+                letter1_col = row.index(letter1)\r\n+            if letter2 in row:\r\n+                letter2_row = rIndex\r\n+                letter2_col = row.index(letter2)\r\n+        \r\n+        if letter1_row == letter2_row:\r\n+            # print(f\"Same row: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n+            decrypted += decrypted_digraph\r\n+        elif letter1_col == letter2_col:\r\n+            # print(f\"Same column: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n+            decrypted += decrypted_digraph\r\n+        else:\r\n+            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n+            decrypted += decrypted_digraph\r\n+            \r\n+    decrypted = decrypted.replace(\"X\", \"\")\r\n+    return decrypted\r\n+\r\n+def main():\r\n+    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+    key = \"SUPERSPY\"\r\n+    \r\n+    grid = generate_grid(key)\r\n+    \r\n+    decrypted_message = decrypt_message(message, grid)\r\n+    print(decrypted_message)\r\n+    return decrypted_message\r\n+\r\n+main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719536619430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,8 +61,9 @@\n             decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n             decrypted += decrypted_digraph\r\n             \r\n     decrypted = decrypted.replace(\"X\", \"\")\r\n+    decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n     return decrypted\r\n \r\n def main():\r\n     message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n@@ -73,84 +74,5 @@\n     decrypted_message = decrypt_message(message, grid)\r\n     print(decrypted_message)\r\n     return decrypted_message\r\n \r\n-main()\n-#!/usr/bin/env python3\r\n-\r\n-# message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-\r\n-# grid = [\r\n-#     ['S','U','P','E','R'],\r\n-#     ['Y','A','B','C','D'],\r\n-#     ['F','G','H','I','K'],\r\n-#     ['L','M','N','O','Q'],\r\n-#     ['T','V','W','X','Z']\r\n-# ]\r\n-\r\n-def generate_grid(key):\r\n-    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\" # Omit 'J'\r\n-    key = key.upper().replace('J', 'I')\r\n-    key_grid = []\r\n-    \r\n-    for char in key:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    for char in alphabet:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n-    \r\n-    return grid\r\n-\r\n-def decrypt_message(message, grid):\r\n-    decrypted = \"\"\r\n-\r\n-    # Constraints: remove 'X', remove special chars, remove spaces\r\n-    # Edgecases: must wrap around edges if necessary (automatically handled with negative indexing)\r\n-\r\n-    for digraph_point in range(0, len(message), 2):\r\n-        letter1 = message[digraph_point]\r\n-        letter2 = message[digraph_point+1]\r\n-\r\n-        letter1_row = -1\r\n-        letter1_col = -1\r\n-        letter2_row = -1\r\n-        letter2_col = -1\r\n-        \r\n-        for rIndex, row in enumerate(grid):\r\n-            if letter1 in row:\r\n-                letter1_row = rIndex\r\n-                letter1_col = row.index(letter1)\r\n-            if letter2 in row:\r\n-                letter2_row = rIndex\r\n-                letter2_col = row.index(letter2)\r\n-        \r\n-        if letter1_row == letter2_row:\r\n-            # print(f\"Same row: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n-            decrypted += decrypted_digraph\r\n-        elif letter1_col == letter2_col:\r\n-            # print(f\"Same column: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n-            decrypted += decrypted_digraph\r\n-        else:\r\n-            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n-            decrypted += decrypted_digraph\r\n-            \r\n-    decrypted = decrypted.replace(\"X\", \"\")\r\n-    return decrypted\r\n-\r\n-def main():\r\n-    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-    key = \"SUPERSPY\"\r\n-    \r\n-    grid = generate_grid(key)\r\n-    \r\n-    decrypted_message = decrypt_message(message, grid)\r\n-    print(decrypted_message)\r\n-    return decrypted_message\r\n-\r\n main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719536638389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,13 +61,13 @@\n             decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n             decrypted += decrypted_digraph\r\n             \r\n     decrypted = decrypted.replace(\"X\", \"\")\r\n-    decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n+    # decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n     return decrypted\r\n \r\n def main():\r\n-    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+    message = \"IKEW!@ENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n     key = \"SUPERSPY\"\r\n     \r\n     grid = generate_grid(key)\r\n     \r\n"
                },
                {
                    "date": 1719536666076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n     return decrypted\r\n \r\n def main():\r\n     message = \"IKEW!@ENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-    key = \"SUPERSPY\"\r\n+    key = \"SUPE!@PY\"\r\n     \r\n     grid = generate_grid(key)\r\n     \r\n     decrypted_message = decrypt_message(message, grid)\r\n"
                },
                {
                    "date": 1719536710672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,8 +69,9 @@\n     message = \"IKEW!@ENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n     key = \"SUPE!@PY\"\r\n     \r\n     grid = generate_grid(key)\r\n+    print(grid)\r\n     \r\n     decrypted_message = decrypt_message(message, grid)\r\n     print(decrypted_message)\r\n     return decrypted_message\r\n"
                },
                {
                    "date": 1719536801350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,17 +61,16 @@\n             decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n             decrypted += decrypted_digraph\r\n             \r\n     decrypted = decrypted.replace(\"X\", \"\")\r\n-    # decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n+    decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n     return decrypted\r\n \r\n def main():\r\n-    message = \"IKEW!@ENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-    key = \"SUPE!@PY\"\r\n+    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+    key = \"SUPERSPY\"\r\n     \r\n     grid = generate_grid(key)\r\n-    print(grid)\r\n     \r\n     decrypted_message = decrypt_message(message, grid)\r\n     print(decrypted_message)\r\n     return decrypted_message\r\n"
                },
                {
                    "date": 1719536981777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,13 +49,13 @@\n                 letter2_col = row.index(letter2)\r\n         \r\n         if letter1_row == letter2_row:\r\n             # print(f\"Same row: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter1_col-1] + grid[letter2_row][letter2_col-1]\r\n+            decrypted_digraph = grid[letter1_row][(letter1_col-1)%5] + grid[letter2_row][(letter2_col-1)%5]\r\n             decrypted += decrypted_digraph\r\n         elif letter1_col == letter2_col:\r\n             # print(f\"Same column: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row-1][letter1_col] + grid[letter2_row-1][letter2_col]\r\n+            decrypted_digraph = grid[(letter1_row-1)%5][letter1_col] + grid[(letter2_row-1)%5][letter2_col]\r\n             decrypted += decrypted_digraph\r\n         else:\r\n             # print(f\"Rectangle: {letter1} and {letter2}\")\r\n             decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n"
                },
                {
                    "date": 1719537001304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n def decrypt_message(message, grid):\r\n     decrypted = \"\"\r\n \r\n     # Constraints: remove 'X', remove special chars, remove spaces\r\n-    # Edgecases: must wrap around edges if necessary (automatically handled with negative indexing)\r\n+    # Edgecases: must wrap around edges if necessary\r\n \r\n     for digraph_point in range(0, len(message), 2):\r\n         letter1 = message[digraph_point]\r\n         letter2 = message[digraph_point+1]\r\n"
                },
                {
                    "date": 1719537023355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,13 +49,13 @@\n                 letter2_col = row.index(letter2)\r\n         \r\n         if letter1_row == letter2_row:\r\n             # print(f\"Same row: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][(letter1_col-1)%5] + grid[letter2_row][(letter2_col-1)%5]\r\n+            decrypted_digraph = grid[letter1_row][(letter1_col-1) % 5] + grid[letter2_row][(letter2_col-1) % 5]\r\n             decrypted += decrypted_digraph\r\n         elif letter1_col == letter2_col:\r\n             # print(f\"Same column: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[(letter1_row-1)%5][letter1_col] + grid[(letter2_row-1)%5][letter2_col]\r\n+            decrypted_digraph = grid[(letter1_row-1) % 5][letter1_col] + grid[(letter2_row-1) % 5][letter2_col]\r\n             decrypted += decrypted_digraph\r\n         else:\r\n             # print(f\"Rectangle: {letter1} and {letter2}\")\r\n             decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n"
                },
                {
                    "date": 1719537149792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,13 +49,13 @@\n                 letter2_col = row.index(letter2)\r\n         \r\n         if letter1_row == letter2_row:\r\n             # print(f\"Same row: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][(letter1_col-1) % 5] + grid[letter2_row][(letter2_col-1) % 5]\r\n+            decrypted_digraph = grid[letter1_row][(letter1_col-1) % len(row)] + grid[letter2_row][(letter2_col-1) % len(row)] # \r\n             decrypted += decrypted_digraph\r\n         elif letter1_col == letter2_col:\r\n             # print(f\"Same column: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[(letter1_row-1) % 5][letter1_col] + grid[(letter2_row-1) % 5][letter2_col]\r\n+            decrypted_digraph = grid[(letter1_row-1) % len(grid)][letter1_col] + grid[(letter2_row-1) % len(grid)][letter2_col]\r\n             decrypted += decrypted_digraph\r\n         else:\r\n             # print(f\"Rectangle: {letter1} and {letter2}\")\r\n             decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n"
                },
                {
                    "date": 1719537207467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,8 +69,9 @@\n     message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n     key = \"SUPERSPY\"\r\n     \r\n     grid = generate_grid(key)\r\n+    print(grid)\r\n     \r\n     decrypted_message = decrypt_message(message, grid)\r\n     print(decrypted_message)\r\n     return decrypted_message\r\n"
                },
                {
                    "date": 1719537219178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n     decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n     return decrypted\r\n \r\n def main():\r\n-    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+    message = \"SYEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n     key = \"SUPERSPY\"\r\n     \r\n     grid = generate_grid(key)\r\n     print(grid)\r\n"
                },
                {
                    "date": 1719537230854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,78 @@\n+#!/usr/bin/env python3\r\n+\r\n+# grid = [\r\n+#     ['S','U','P','E','R'],\r\n+#     ['Y','A','B','C','D'],\r\n+#     ['F','G','H','I','K'],\r\n+#     ['L','M','N','O','Q'],\r\n+#     ['T','V','W','X','Z']\r\n+# ]\r\n+\r\n+def generate_grid(key):\r\n+    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\" # Omit 'J'\r\n+    key = key.upper().replace('J', 'I')\r\n+    key_grid = []\r\n+    \r\n+    for char in key:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    for char in alphabet:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n+    \r\n+    return grid\r\n+\r\n+def decrypt_message(message, grid):\r\n+    decrypted = \"\"\r\n+\r\n+    # Constraints: remove 'X', remove special chars, remove spaces\r\n+    # Edgecases: must wrap around edges if necessary\r\n+\r\n+    for digraph_point in range(0, len(message), 2):\r\n+        letter1 = message[digraph_point]\r\n+        letter2 = message[digraph_point+1]\r\n+\r\n+        letter1_row = -1\r\n+        letter1_col = -1\r\n+        letter2_row = -1\r\n+        letter2_col = -1\r\n+        \r\n+        for rIndex, row in enumerate(grid):\r\n+            if letter1 in row:\r\n+                letter1_row = rIndex\r\n+                letter1_col = row.index(letter1)\r\n+            if letter2 in row:\r\n+                letter2_row = rIndex\r\n+                letter2_col = row.index(letter2)\r\n+        \r\n+        if letter1_row == letter2_row:\r\n+            # print(f\"Same row: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][(letter1_col-1) % len(row)] + grid[letter2_row][(letter2_col-1) % len(row)] # \r\n+            decrypted += decrypted_digraph\r\n+        elif letter1_col == letter2_col:\r\n+            # print(f\"Same column: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[(letter1_row-1) % len(grid)][letter1_col] + grid[(letter2_row-1) % len(grid)][letter2_col]\r\n+            decrypted += decrypted_digraph\r\n+        else:\r\n+            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n+            decrypted += decrypted_digraph\r\n+            \r\n+    decrypted = decrypted.replace(\"X\", \"\")\r\n+    decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n+    return decrypted\r\n+\r\n+def main():\r\n+    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+    key = \"SUPERSPY\"\r\n+    \r\n+    grid = generate_grid(key)\r\n+    \r\n+    decrypted_message = decrypt_message(message, grid)\r\n+    print(decrypted_message)\r\n+    return decrypted_message\r\n+\r\n+main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719537296844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,78 @@\n+#!/usr/bin/env python3\r\n+\r\n+# grid = [\r\n+#     ['S','U','P','E','R'],\r\n+#     ['Y','A','B','C','D'],\r\n+#     ['F','G','H','I','K'],\r\n+#     ['L','M','N','O','Q'],\r\n+#     ['T','V','W','X','Z']\r\n+# ]\r\n+\r\n+def generate_grid(key):\r\n+    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\" # Omit 'J'\r\n+    key = key.upper().replace('J', 'I')\r\n+    key_grid = []\r\n+    \r\n+    for char in key:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    for char in alphabet:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n+    \r\n+    return grid\r\n+\r\n+def decrypt_message(message, grid):\r\n+    decrypted = \"\"\r\n+\r\n+    # Constraints: remove 'X', remove special chars, remove spaces\r\n+    # Edgecases: must wrap around edges if necessary\r\n+\r\n+    for digraph_point in range(0, len(message), 2):\r\n+        letter1 = message[digraph_point]\r\n+        letter2 = message[digraph_point+1]\r\n+\r\n+        letter1_row = -1\r\n+        letter1_col = -1\r\n+        letter2_row = -1\r\n+        letter2_col = -1\r\n+        \r\n+        for rIndex, row in enumerate(grid):\r\n+            if letter1 in row:\r\n+                letter1_row = rIndex\r\n+                letter1_col = row.index(letter1)\r\n+            if letter2 in row:\r\n+                letter2_row = rIndex\r\n+                letter2_col = row.index(letter2)\r\n+        \r\n+        if letter1_row == letter2_row:\r\n+            # print(f\"Same row: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][(letter1_col-1) % len(row)] + grid[letter2_row][(letter2_col-1) % len(row)] # implemented wrap logic although technically not necessary with negative indexing\r\n+            decrypted += decrypted_digraph\r\n+        elif letter1_col == letter2_col:\r\n+            # print(f\"Same column: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[(letter1_row-1) % len(grid)][letter1_col] + grid[(letter2_row-1) % len(grid)][letter2_col] # implemented wrap logic although technically not necessary with negative indexing\r\n+            decrypted += decrypted_digraph\r\n+        else:\r\n+            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n+            decrypted += decrypted_digraph\r\n+            \r\n+    decrypted = decrypted.replace(\"X\", \"\")\r\n+    decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n+    return decrypted\r\n+\r\n+def main():\r\n+    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+    key = \"SUPERSPY\"\r\n+    \r\n+    grid = generate_grid(key)\r\n+    \r\n+    decrypted_message = decrypt_message(message, grid)\r\n+    print(decrypted_message)\r\n+    return decrypted_message\r\n+\r\n+main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719537312370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,78 @@\n+#!/usr/bin/env python3\r\n+\r\n+# grid = [\r\n+#     ['S','U','P','E','R'],\r\n+#     ['Y','A','B','C','D'],\r\n+#     ['F','G','H','I','K'],\r\n+#     ['L','M','N','O','Q'],\r\n+#     ['T','V','W','X','Z']\r\n+# ]\r\n+\r\n+def generate_grid(key):\r\n+    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\" # Omit 'J'\r\n+    key = key.upper().replace('J', 'I')\r\n+    key_grid = []\r\n+    \r\n+    for char in key:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    for char in alphabet:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n+    \r\n+    return grid\r\n+\r\n+def decrypt_message(message, grid):\r\n+    decrypted = \"\"\r\n+\r\n+    # Constraints: remove 'X', remove special chars, remove spaces\r\n+    # Edgecases: must wrap around edges if necessary\r\n+\r\n+    for digraph_point in range(0, len(message), 2):\r\n+        letter1 = message[digraph_point]\r\n+        letter2 = message[digraph_point+1]\r\n+\r\n+        letter1_row = -1\r\n+        letter1_col = -1\r\n+        letter2_row = -1\r\n+        letter2_col = -1\r\n+        \r\n+        for rIndex, row in enumerate(grid):\r\n+            if letter1 in row:\r\n+                letter1_row = rIndex\r\n+                letter1_col = row.index(letter1)\r\n+            if letter2 in row:\r\n+                letter2_row = rIndex\r\n+                letter2_col = row.index(letter2)\r\n+        \r\n+        if letter1_row == letter2_row:\r\n+            # print(f\"Same row: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][(letter1_col-1) % len(row)] + grid[letter2_row][(letter2_col-1) % len(row)] # implemented wrap logic although technically not necessary with negative indexing\r\n+            decrypted += decrypted_digraph\r\n+        elif letter1_col == letter2_col:\r\n+            # print(f\"Same column: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[(letter1_row-1) % len(grid)][letter1_col] + grid[(letter2_row-1) % len(grid)][letter2_col] # implemented wrap logic although technically not necessary with negative indexing\r\n+            decrypted += decrypted_digraph\r\n+        else:\r\n+            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n+            decrypted += decrypted_digraph\r\n+            \r\n+    decrypted = decrypted.replace(\"X\", \"\")\r\n+    decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n+    return decrypted\r\n+\r\n+def main():\r\n+    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+    key = \"SUPERSPY\"\r\n+    \r\n+    grid = generate_grid(key)\r\n+    \r\n+    decrypted_message = decrypt_message(message, grid)\r\n+    print(decrypted_message)\r\n+    return decrypted_message\r\n+\r\n+main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719537733953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,89 +24,20 @@\n     grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n     \r\n     return grid\r\n \r\n+def prepare_message(message):\r\n+    # Remove spaces and non-alphabetic characters, then check if the length is even\r\n+    clean_message = ''.join([char for char in message.upper().replace('J', 'I') if char.isalpha()])\r\n+    if len(clean_message) % 2 != 0:\r\n+        raise ValueError(\"The message length is not even. Playfair cipher requires an even-length message.\")\r\n+    return clean_message\r\n+\r\n def decrypt_message(message, grid):\r\n     decrypted = \"\"\r\n \r\n-    # Constraints: remove 'X', remove special chars, remove spaces\r\n-    # Edgecases: must wrap around edges if necessary\r\n+    message = prepare_message(message)\r\n \r\n-    for digraph_point in range(0, len(message), 2):\r\n-        letter1 = message[digraph_point]\r\n-        letter2 = message[digraph_point+1]\r\n-\r\n-        letter1_row = -1\r\n-        letter1_col = -1\r\n-        letter2_row = -1\r\n-        letter2_col = -1\r\n-        \r\n-        for rIndex, row in enumerate(grid):\r\n-            if letter1 in row:\r\n-                letter1_row = rIndex\r\n-                letter1_col = row.index(letter1)\r\n-            if letter2 in row:\r\n-                letter2_row = rIndex\r\n-                letter2_col = row.index(letter2)\r\n-        \r\n-        if letter1_row == letter2_row:\r\n-            # print(f\"Same row: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][(letter1_col-1) % len(row)] + grid[letter2_row][(letter2_col-1) % len(row)] # implemented wrap logic although technically not necessary with negative indexing\r\n-            decrypted += decrypted_digraph\r\n-        elif letter1_col == letter2_col:\r\n-            # print(f\"Same column: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[(letter1_row-1) % len(grid)][letter1_col] + grid[(letter2_row-1) % len(grid)][letter2_col] # implemented wrap logic although technically not necessary with negative indexing\r\n-            decrypted += decrypted_digraph\r\n-        else:\r\n-            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n-            decrypted += decrypted_digraph\r\n-            \r\n-    decrypted = decrypted.replace(\"X\", \"\")\r\n-    decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n-    return decrypted\r\n-\r\n-def main():\r\n-    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-    key = \"SUPERSPY\"\r\n-    \r\n-    grid = generate_grid(key)\r\n-    \r\n-    decrypted_message = decrypt_message(message, grid)\r\n-    print(decrypted_message)\r\n-    return decrypted_message\r\n-\r\n-main()\n-#!/usr/bin/env python3\r\n-\r\n-# grid = [\r\n-#     ['S','U','P','E','R'],\r\n-#     ['Y','A','B','C','D'],\r\n-#     ['F','G','H','I','K'],\r\n-#     ['L','M','N','O','Q'],\r\n-#     ['T','V','W','X','Z']\r\n-# ]\r\n-\r\n-def generate_grid(key):\r\n-    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\" # Omit 'J'\r\n-    key = key.upper().replace('J', 'I')\r\n-    key_grid = []\r\n-    \r\n-    for char in key:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    for char in alphabet:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n-    \r\n-    return grid\r\n-\r\n-def decrypt_message(message, grid):\r\n-    decrypted = \"\"\r\n-\r\n     # Constraints: remove 'X', remove special chars, remove spaces\r\n     # Edgecases: must wrap around edges if necessary\r\n \r\n     for digraph_point in range(0, len(message), 2):\r\n@@ -152,162 +83,5 @@\n     decrypted_message = decrypt_message(message, grid)\r\n     print(decrypted_message)\r\n     return decrypted_message\r\n \r\n-main()\n-#!/usr/bin/env python3\r\n-\r\n-# grid = [\r\n-#     ['S','U','P','E','R'],\r\n-#     ['Y','A','B','C','D'],\r\n-#     ['F','G','H','I','K'],\r\n-#     ['L','M','N','O','Q'],\r\n-#     ['T','V','W','X','Z']\r\n-# ]\r\n-\r\n-def generate_grid(key):\r\n-    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\" # Omit 'J'\r\n-    key = key.upper().replace('J', 'I')\r\n-    key_grid = []\r\n-    \r\n-    for char in key:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    for char in alphabet:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n-    \r\n-    return grid\r\n-\r\n-def decrypt_message(message, grid):\r\n-    decrypted = \"\"\r\n-\r\n-    # Constraints: remove 'X', remove special chars, remove spaces\r\n-    # Edgecases: must wrap around edges if necessary\r\n-\r\n-    for digraph_point in range(0, len(message), 2):\r\n-        letter1 = message[digraph_point]\r\n-        letter2 = message[digraph_point+1]\r\n-\r\n-        letter1_row = -1\r\n-        letter1_col = -1\r\n-        letter2_row = -1\r\n-        letter2_col = -1\r\n-        \r\n-        for rIndex, row in enumerate(grid):\r\n-            if letter1 in row:\r\n-                letter1_row = rIndex\r\n-                letter1_col = row.index(letter1)\r\n-            if letter2 in row:\r\n-                letter2_row = rIndex\r\n-                letter2_col = row.index(letter2)\r\n-        \r\n-        if letter1_row == letter2_row:\r\n-            # print(f\"Same row: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][(letter1_col-1) % len(row)] + grid[letter2_row][(letter2_col-1) % len(row)] # \r\n-            decrypted += decrypted_digraph\r\n-        elif letter1_col == letter2_col:\r\n-            # print(f\"Same column: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[(letter1_row-1) % len(grid)][letter1_col] + grid[(letter2_row-1) % len(grid)][letter2_col]\r\n-            decrypted += decrypted_digraph\r\n-        else:\r\n-            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n-            decrypted += decrypted_digraph\r\n-            \r\n-    decrypted = decrypted.replace(\"X\", \"\")\r\n-    decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n-    return decrypted\r\n-\r\n-def main():\r\n-    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-    key = \"SUPERSPY\"\r\n-    \r\n-    grid = generate_grid(key)\r\n-    \r\n-    decrypted_message = decrypt_message(message, grid)\r\n-    print(decrypted_message)\r\n-    return decrypted_message\r\n-\r\n-main()\n-#!/usr/bin/env python3\r\n-\r\n-# grid = [\r\n-#     ['S','U','P','E','R'],\r\n-#     ['Y','A','B','C','D'],\r\n-#     ['F','G','H','I','K'],\r\n-#     ['L','M','N','O','Q'],\r\n-#     ['T','V','W','X','Z']\r\n-# ]\r\n-\r\n-def generate_grid(key):\r\n-    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\" # Omit 'J'\r\n-    key = key.upper().replace('J', 'I')\r\n-    key_grid = []\r\n-    \r\n-    for char in key:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    for char in alphabet:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n-    \r\n-    return grid\r\n-\r\n-def decrypt_message(message, grid):\r\n-    decrypted = \"\"\r\n-\r\n-    # Constraints: remove 'X', remove special chars, remove spaces\r\n-    # Edgecases: must wrap around edges if necessary\r\n-\r\n-    for digraph_point in range(0, len(message), 2):\r\n-        letter1 = message[digraph_point]\r\n-        letter2 = message[digraph_point+1]\r\n-\r\n-        letter1_row = -1\r\n-        letter1_col = -1\r\n-        letter2_row = -1\r\n-        letter2_col = -1\r\n-        \r\n-        for rIndex, row in enumerate(grid):\r\n-            if letter1 in row:\r\n-                letter1_row = rIndex\r\n-                letter1_col = row.index(letter1)\r\n-            if letter2 in row:\r\n-                letter2_row = rIndex\r\n-                letter2_col = row.index(letter2)\r\n-        \r\n-        if letter1_row == letter2_row:\r\n-            # print(f\"Same row: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][(letter1_col-1) % len(row)] + grid[letter2_row][(letter2_col-1) % len(row)] # \r\n-            decrypted += decrypted_digraph\r\n-        elif letter1_col == letter2_col:\r\n-            # print(f\"Same column: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[(letter1_row-1) % len(grid)][letter1_col] + grid[(letter2_row-1) % len(grid)][letter2_col]\r\n-            decrypted += decrypted_digraph\r\n-        else:\r\n-            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n-            decrypted += decrypted_digraph\r\n-            \r\n-    decrypted = decrypted.replace(\"X\", \"\")\r\n-    decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n-    return decrypted\r\n-\r\n-def main():\r\n-    message = \"SYEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-    key = \"SUPERSPY\"\r\n-    \r\n-    grid = generate_grid(key)\r\n-    print(grid)\r\n-    \r\n-    decrypted_message = decrypt_message(message, grid)\r\n-    print(decrypted_message)\r\n-    return decrypted_message\r\n-\r\n main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719537747698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,10 +74,10 @@\n     decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n     return decrypted\r\n \r\n def main():\r\n-    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-    key = \"SUPERSPY\"\r\n+    message = \"IK!@ENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+    key = \"SUP!@SPY\"\r\n     \r\n     grid = generate_grid(key)\r\n     \r\n     decrypted_message = decrypt_message(message, grid)\r\n"
                },
                {
                    "date": 1719537754772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,10 +74,10 @@\n     decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n     return decrypted\r\n \r\n def main():\r\n-    message = \"IK!@ENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-    key = \"SUP!@SPY\"\r\n+    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+    key = \"SUPERSPY\"\r\n     \r\n     grid = generate_grid(key)\r\n     \r\n     decrypted_message = decrypt_message(message, grid)\r\n"
                },
                {
                    "date": 1719537945752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,80 @@\n+#!/usr/bin/env python3\r\n+\r\n+# grid = [\r\n+#     ['S','U','P','E','R'],\r\n+#     ['Y','A','B','C','D'],\r\n+#     ['F','G','H','I','K'],\r\n+#     ['L','M','N','O','Q'],\r\n+#     ['T','V','W','X','Z']\r\n+# ]\r\n+\r\n+def generate_grid(key):\r\n+    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\" # Omit 'J'\r\n+    key = key.upper().replace('J', 'I')\r\n+    key_grid = []\r\n+    \r\n+    for char in key:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    for char in alphabet:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n+    \r\n+    return grid\r\n+\r\n+def decrypt_message(message, grid):\r\n+    decrypted = \"\"\r\n+\r\n+    message = ''.join([char for char in message if char.isalpha()])\r\n+\r\n+    # Constraints: remove 'X', remove special chars, remove spaces\r\n+    # Edgecases: must wrap around edges if necessary\r\n+\r\n+    for digraph_point in range(0, len(message), 2):\r\n+        letter1 = message[digraph_point]\r\n+        letter2 = message[digraph_point+1]\r\n+\r\n+        letter1_row = -1\r\n+        letter1_col = -1\r\n+        letter2_row = -1\r\n+        letter2_col = -1\r\n+        \r\n+        for rIndex, row in enumerate(grid):\r\n+            if letter1 in row:\r\n+                letter1_row = rIndex\r\n+                letter1_col = row.index(letter1)\r\n+            if letter2 in row:\r\n+                letter2_row = rIndex\r\n+                letter2_col = row.index(letter2)\r\n+        \r\n+        if letter1_row == letter2_row:\r\n+            # print(f\"Same row: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][(letter1_col-1) % len(row)] + grid[letter2_row][(letter2_col-1) % len(row)] # implemented wrap logic although technically not necessary with negative indexing\r\n+            decrypted += decrypted_digraph\r\n+        elif letter1_col == letter2_col:\r\n+            # print(f\"Same column: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[(letter1_row-1) % len(grid)][letter1_col] + grid[(letter2_row-1) % len(grid)][letter2_col] # implemented wrap logic although technically not necessary with negative indexing\r\n+            decrypted += decrypted_digraph\r\n+        else:\r\n+            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n+            decrypted += decrypted_digraph\r\n+            \r\n+    decrypted = decrypted.replace(\"X\", \"\")\r\n+    decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n+    return decrypted\r\n+\r\n+def main():\r\n+    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+    key = \"SUPERSPY\"\r\n+    \r\n+    grid = generate_grid(key)\r\n+    \r\n+    decrypted_message = decrypt_message(message, grid)\r\n+    print(decrypted_message)\r\n+    return decrypted_message\r\n+\r\n+main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719537964799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,80 @@\n+#!/usr/bin/env python3\r\n+\r\n+# grid = [\r\n+#     ['S','U','P','E','R'],\r\n+#     ['Y','A','B','C','D'],\r\n+#     ['F','G','H','I','K'],\r\n+#     ['L','M','N','O','Q'],\r\n+#     ['T','V','W','X','Z']\r\n+# ]\r\n+\r\n+def generate_grid(key):\r\n+    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\" # Omit 'J'\r\n+    key = key.upper().replace('J', 'I')\r\n+    key_grid = []\r\n+    \r\n+    for char in key:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    for char in alphabet:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n+    \r\n+    return grid\r\n+\r\n+def decrypt_message(message, grid):\r\n+    decrypted = \"\"\r\n+\r\n+    message = ''.join([char for char in message if char.isalpha()]) # clean message to avoid errors\r\n+\r\n+    # Constraints: remove 'X', remove special chars, remove spaces\r\n+    # Edgecases: must wrap around edges if necessary\r\n+\r\n+    for digraph_point in range(0, len(message), 2):\r\n+        letter1 = message[digraph_point]\r\n+        letter2 = message[digraph_point+1]\r\n+\r\n+        letter1_row = -1\r\n+        letter1_col = -1\r\n+        letter2_row = -1\r\n+        letter2_col = -1\r\n+        \r\n+        for rIndex, row in enumerate(grid):\r\n+            if letter1 in row:\r\n+                letter1_row = rIndex\r\n+                letter1_col = row.index(letter1)\r\n+            if letter2 in row:\r\n+                letter2_row = rIndex\r\n+                letter2_col = row.index(letter2)\r\n+        \r\n+        if letter1_row == letter2_row:\r\n+            # print(f\"Same row: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][(letter1_col-1) % len(row)] + grid[letter2_row][(letter2_col-1) % len(row)] # implemented wrap logic although technically not necessary with negative indexing\r\n+            decrypted += decrypted_digraph\r\n+        elif letter1_col == letter2_col:\r\n+            # print(f\"Same column: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[(letter1_row-1) % len(grid)][letter1_col] + grid[(letter2_row-1) % len(grid)][letter2_col] # implemented wrap logic although technically not necessary with negative indexing\r\n+            decrypted += decrypted_digraph\r\n+        else:\r\n+            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n+            decrypted += decrypted_digraph\r\n+            \r\n+    decrypted = decrypted.replace(\"X\", \"\")\r\n+    decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n+    return decrypted\r\n+\r\n+def main():\r\n+    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+    key = \"SUPERSPY\"\r\n+    \r\n+    grid = generate_grid(key)\r\n+    \r\n+    decrypted_message = decrypt_message(message, grid)\r\n+    print(decrypted_message)\r\n+    return decrypted_message\r\n+\r\n+main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719537984272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,80 @@\n+#!/usr/bin/env python3\r\n+\r\n+# grid = [\r\n+#     ['S','U','P','E','R'],\r\n+#     ['Y','A','B','C','D'],\r\n+#     ['F','G','H','I','K'],\r\n+#     ['L','M','N','O','Q'],\r\n+#     ['T','V','W','X','Z']\r\n+# ]\r\n+\r\n+def generate_grid(key):\r\n+    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\" # Omit 'J'\r\n+    key = key.upper().replace('J', 'I')\r\n+    key_grid = []\r\n+    \r\n+    for char in key:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    for char in alphabet:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n+    \r\n+    return grid\r\n+\r\n+def decrypt_message(message, grid):\r\n+    decrypted = \"\"\r\n+\r\n+    message = ''.join([char for char in message if char.isalpha()]) # Clean message to avoid errors\r\n+\r\n+    # Constraints: remove 'X', remove special chars, remove spaces\r\n+    # Edgecases: must wrap around edges if necessary\r\n+\r\n+    for digraph_point in range(0, len(message), 2):\r\n+        letter1 = message[digraph_point]\r\n+        letter2 = message[digraph_point+1]\r\n+\r\n+        letter1_row = -1\r\n+        letter1_col = -1\r\n+        letter2_row = -1\r\n+        letter2_col = -1\r\n+        \r\n+        for rIndex, row in enumerate(grid):\r\n+            if letter1 in row:\r\n+                letter1_row = rIndex\r\n+                letter1_col = row.index(letter1)\r\n+            if letter2 in row:\r\n+                letter2_row = rIndex\r\n+                letter2_col = row.index(letter2)\r\n+        \r\n+        if letter1_row == letter2_row:\r\n+            # print(f\"Same row: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][(letter1_col-1) % len(row)] + grid[letter2_row][(letter2_col-1) % len(row)] # Implemented wrap logic although technically not necessary with negative indexing\r\n+            decrypted += decrypted_digraph\r\n+        elif letter1_col == letter2_col:\r\n+            # print(f\"Same column: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[(letter1_row-1) % len(grid)][letter1_col] + grid[(letter2_row-1) % len(grid)][letter2_col] # Implemented wrap logic although technically not necessary with negative indexing\r\n+            decrypted += decrypted_digraph\r\n+        else:\r\n+            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n+            decrypted += decrypted_digraph\r\n+            \r\n+    decrypted = decrypted.replace(\"X\", \"\")\r\n+    decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n+    return decrypted\r\n+\r\n+def main():\r\n+    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+    key = \"SUPERSPY\"\r\n+    \r\n+    grid = generate_grid(key)\r\n+    \r\n+    decrypted_message = decrypt_message(message, grid)\r\n+    print(decrypted_message)\r\n+    return decrypted_message\r\n+\r\n+main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719538027162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,6 @@\n #!/usr/bin/env python3\r\n \r\n-# grid = [\r\n-#     ['S','U','P','E','R'],\r\n-#     ['Y','A','B','C','D'],\r\n-#     ['F','G','H','I','K'],\r\n-#     ['L','M','N','O','Q'],\r\n-#     ['T','V','W','X','Z']\r\n-# ]\r\n-\r\n def generate_grid(key):\r\n     alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\" # Omit 'J'\r\n     key = key.upper().replace('J', 'I')\r\n     key_grid = []\r\n@@ -71,8 +63,15 @@\n     message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n     key = \"SUPERSPY\"\r\n     \r\n     grid = generate_grid(key)\r\n+    # grid = [\r\n+    #     ['S','U','P','E','R'],\r\n+    #     ['Y','A','B','C','D'],\r\n+    #     ['F','G','H','I','K'],\r\n+    #     ['L','M','N','O','Q'],\r\n+    #     ['T','V','W','X','Z']\r\n+    # ]\r\n     \r\n     decrypted_message = decrypt_message(message, grid)\r\n     print(decrypted_message)\r\n     return decrypted_message\r\n"
                },
                {
                    "date": 1719538234909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,12 +16,16 @@\n     grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n     \r\n     return grid\r\n \r\n+def prepare_message(message):\r\n+    clean_message = ''.join([char for char in message if char.isalpha()])\r\n+    return clean_message\r\n+\r\n def decrypt_message(message, grid):\r\n     decrypted = \"\"\r\n \r\n-    message = ''.join([char for char in message if char.isalpha()]) # Clean message to avoid errors\r\n+    message = prepare_message(message) # Clean message to avoid errors\r\n \r\n     # Constraints: remove 'X', remove special chars, remove spaces\r\n     # Edgecases: must wrap around edges if necessary\r\n \r\n@@ -75,252 +79,5 @@\n     decrypted_message = decrypt_message(message, grid)\r\n     print(decrypted_message)\r\n     return decrypted_message\r\n \r\n-main()\n-#!/usr/bin/env python3\r\n-\r\n-# grid = [\r\n-#     ['S','U','P','E','R'],\r\n-#     ['Y','A','B','C','D'],\r\n-#     ['F','G','H','I','K'],\r\n-#     ['L','M','N','O','Q'],\r\n-#     ['T','V','W','X','Z']\r\n-# ]\r\n-\r\n-def generate_grid(key):\r\n-    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\" # Omit 'J'\r\n-    key = key.upper().replace('J', 'I')\r\n-    key_grid = []\r\n-    \r\n-    for char in key:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    for char in alphabet:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n-    \r\n-    return grid\r\n-\r\n-def decrypt_message(message, grid):\r\n-    decrypted = \"\"\r\n-\r\n-    message = ''.join([char for char in message if char.isalpha()]) # clean message to avoid errors\r\n-\r\n-    # Constraints: remove 'X', remove special chars, remove spaces\r\n-    # Edgecases: must wrap around edges if necessary\r\n-\r\n-    for digraph_point in range(0, len(message), 2):\r\n-        letter1 = message[digraph_point]\r\n-        letter2 = message[digraph_point+1]\r\n-\r\n-        letter1_row = -1\r\n-        letter1_col = -1\r\n-        letter2_row = -1\r\n-        letter2_col = -1\r\n-        \r\n-        for rIndex, row in enumerate(grid):\r\n-            if letter1 in row:\r\n-                letter1_row = rIndex\r\n-                letter1_col = row.index(letter1)\r\n-            if letter2 in row:\r\n-                letter2_row = rIndex\r\n-                letter2_col = row.index(letter2)\r\n-        \r\n-        if letter1_row == letter2_row:\r\n-            # print(f\"Same row: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][(letter1_col-1) % len(row)] + grid[letter2_row][(letter2_col-1) % len(row)] # implemented wrap logic although technically not necessary with negative indexing\r\n-            decrypted += decrypted_digraph\r\n-        elif letter1_col == letter2_col:\r\n-            # print(f\"Same column: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[(letter1_row-1) % len(grid)][letter1_col] + grid[(letter2_row-1) % len(grid)][letter2_col] # implemented wrap logic although technically not necessary with negative indexing\r\n-            decrypted += decrypted_digraph\r\n-        else:\r\n-            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n-            decrypted += decrypted_digraph\r\n-            \r\n-    decrypted = decrypted.replace(\"X\", \"\")\r\n-    decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n-    return decrypted\r\n-\r\n-def main():\r\n-    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-    key = \"SUPERSPY\"\r\n-    \r\n-    grid = generate_grid(key)\r\n-    \r\n-    decrypted_message = decrypt_message(message, grid)\r\n-    print(decrypted_message)\r\n-    return decrypted_message\r\n-\r\n-main()\n-#!/usr/bin/env python3\r\n-\r\n-# grid = [\r\n-#     ['S','U','P','E','R'],\r\n-#     ['Y','A','B','C','D'],\r\n-#     ['F','G','H','I','K'],\r\n-#     ['L','M','N','O','Q'],\r\n-#     ['T','V','W','X','Z']\r\n-# ]\r\n-\r\n-def generate_grid(key):\r\n-    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\" # Omit 'J'\r\n-    key = key.upper().replace('J', 'I')\r\n-    key_grid = []\r\n-    \r\n-    for char in key:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    for char in alphabet:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n-    \r\n-    return grid\r\n-\r\n-def decrypt_message(message, grid):\r\n-    decrypted = \"\"\r\n-\r\n-    message = ''.join([char for char in message if char.isalpha()])\r\n-\r\n-    # Constraints: remove 'X', remove special chars, remove spaces\r\n-    # Edgecases: must wrap around edges if necessary\r\n-\r\n-    for digraph_point in range(0, len(message), 2):\r\n-        letter1 = message[digraph_point]\r\n-        letter2 = message[digraph_point+1]\r\n-\r\n-        letter1_row = -1\r\n-        letter1_col = -1\r\n-        letter2_row = -1\r\n-        letter2_col = -1\r\n-        \r\n-        for rIndex, row in enumerate(grid):\r\n-            if letter1 in row:\r\n-                letter1_row = rIndex\r\n-                letter1_col = row.index(letter1)\r\n-            if letter2 in row:\r\n-                letter2_row = rIndex\r\n-                letter2_col = row.index(letter2)\r\n-        \r\n-        if letter1_row == letter2_row:\r\n-            # print(f\"Same row: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][(letter1_col-1) % len(row)] + grid[letter2_row][(letter2_col-1) % len(row)] # implemented wrap logic although technically not necessary with negative indexing\r\n-            decrypted += decrypted_digraph\r\n-        elif letter1_col == letter2_col:\r\n-            # print(f\"Same column: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[(letter1_row-1) % len(grid)][letter1_col] + grid[(letter2_row-1) % len(grid)][letter2_col] # implemented wrap logic although technically not necessary with negative indexing\r\n-            decrypted += decrypted_digraph\r\n-        else:\r\n-            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n-            decrypted += decrypted_digraph\r\n-            \r\n-    decrypted = decrypted.replace(\"X\", \"\")\r\n-    decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n-    return decrypted\r\n-\r\n-def main():\r\n-    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-    key = \"SUPERSPY\"\r\n-    \r\n-    grid = generate_grid(key)\r\n-    \r\n-    decrypted_message = decrypt_message(message, grid)\r\n-    print(decrypted_message)\r\n-    return decrypted_message\r\n-\r\n-main()\n-#!/usr/bin/env python3\r\n-\r\n-# grid = [\r\n-#     ['S','U','P','E','R'],\r\n-#     ['Y','A','B','C','D'],\r\n-#     ['F','G','H','I','K'],\r\n-#     ['L','M','N','O','Q'],\r\n-#     ['T','V','W','X','Z']\r\n-# ]\r\n-\r\n-def generate_grid(key):\r\n-    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\" # Omit 'J'\r\n-    key = key.upper().replace('J', 'I')\r\n-    key_grid = []\r\n-    \r\n-    for char in key:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    for char in alphabet:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n-    \r\n-    return grid\r\n-\r\n-def prepare_message(message):\r\n-    # Remove spaces and non-alphabetic characters, then check if the length is even\r\n-    clean_message = ''.join([char for char in message.upper().replace('J', 'I') if char.isalpha()])\r\n-    if len(clean_message) % 2 != 0:\r\n-        raise ValueError(\"The message length is not even. Playfair cipher requires an even-length message.\")\r\n-    return clean_message\r\n-\r\n-def decrypt_message(message, grid):\r\n-    decrypted = \"\"\r\n-\r\n-    message = prepare_message(message)\r\n-\r\n-    # Constraints: remove 'X', remove special chars, remove spaces\r\n-    # Edgecases: must wrap around edges if necessary\r\n-\r\n-    for digraph_point in range(0, len(message), 2):\r\n-        letter1 = message[digraph_point]\r\n-        letter2 = message[digraph_point+1]\r\n-\r\n-        letter1_row = -1\r\n-        letter1_col = -1\r\n-        letter2_row = -1\r\n-        letter2_col = -1\r\n-        \r\n-        for rIndex, row in enumerate(grid):\r\n-            if letter1 in row:\r\n-                letter1_row = rIndex\r\n-                letter1_col = row.index(letter1)\r\n-            if letter2 in row:\r\n-                letter2_row = rIndex\r\n-                letter2_col = row.index(letter2)\r\n-        \r\n-        if letter1_row == letter2_row:\r\n-            # print(f\"Same row: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][(letter1_col-1) % len(row)] + grid[letter2_row][(letter2_col-1) % len(row)] # implemented wrap logic although technically not necessary with negative indexing\r\n-            decrypted += decrypted_digraph\r\n-        elif letter1_col == letter2_col:\r\n-            # print(f\"Same column: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[(letter1_row-1) % len(grid)][letter1_col] + grid[(letter2_row-1) % len(grid)][letter2_col] # implemented wrap logic although technically not necessary with negative indexing\r\n-            decrypted += decrypted_digraph\r\n-        else:\r\n-            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n-            decrypted += decrypted_digraph\r\n-            \r\n-    decrypted = decrypted.replace(\"X\", \"\")\r\n-    decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n-    return decrypted\r\n-\r\n-def main():\r\n-    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-    key = \"SUPERSPY\"\r\n-    \r\n-    grid = generate_grid(key)\r\n-    \r\n-    decrypted_message = decrypt_message(message, grid)\r\n-    print(decrypted_message)\r\n-    return decrypted_message\r\n-\r\n main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719538316448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n     \r\n     return grid\r\n \r\n def prepare_message(message):\r\n+    clean_message = clean_message.upper()\r\n     clean_message = ''.join([char for char in message if char.isalpha()])\r\n     return clean_message\r\n \r\n def decrypt_message(message, grid):\r\n@@ -29,10 +30,9 @@\n     # Constraints: remove 'X', remove special chars, remove spaces\r\n     # Edgecases: must wrap around edges if necessary\r\n \r\n     for digraph_point in range(0, len(message), 2):\r\n-        letter1 = message[digraph_point]\r\n-        letter2 = message[digraph_point+1]\r\n+        letter1, letter2 = message[digraph_point], message[digraph_point+1]\r\n \r\n         letter1_row = -1\r\n         letter1_col = -1\r\n         letter2_row = -1\r\n"
                },
                {
                    "date": 1719538340613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,10 @@\n     \r\n     return grid\r\n \r\n def prepare_message(message):\r\n-    clean_message = clean_message.upper()\r\n-    clean_message = ''.join([char for char in message if char.isalpha()])\r\n+    clean_message = message.upper()\r\n+    clean_message = ''.join([char for char in clean_message if char.isalpha()])\r\n     return clean_message\r\n \r\n def decrypt_message(message, grid):\r\n     decrypted = \"\"\r\n"
                },
                {
                    "date": 1719538511947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,13 @@\n \r\n def prepare_message(message):\r\n     clean_message = message.upper()\r\n     clean_message = ''.join([char for char in clean_message if char.isalpha()])\r\n+\r\n+    # Playfair Cipher typically appends 'X' to complete the final digram if the initial message has an odd number of chars\r\n+    if len(clean_message) % 2 != 0:\r\n+        clean_message += 'X'\r\n+\r\n     return clean_message\r\n \r\n def decrypt_message(message, grid):\r\n     decrypted = \"\"\r\n"
                },
                {
                    "date": 1719538602222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n     decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n     return decrypted\r\n \r\n def main():\r\n-    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+    message = \"JPOTMQOCEZSDXNSQB!KNXDUSCMECQHOJV\"\r\n     key = \"SUPERSPY\"\r\n     \r\n     grid = generate_grid(key)\r\n     # grid = [\r\n"
                },
                {
                    "date": 1719538631341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n     decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n     return decrypted\r\n \r\n def main():\r\n-    message = \"JPOTMQOCEZSDXNSQB!KNXDUSCMECQHOJV\"\r\n+    message = \"IPOTMQOCEZSDXNSQB!KNXDUSCMECQHOIV\"\r\n     key = \"SUPERSPY\"\r\n     \r\n     grid = generate_grid(key)\r\n     # grid = [\r\n"
                },
                {
                    "date": 1719538683423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     \r\n     return grid\r\n \r\n def prepare_message(message):\r\n-    clean_message = message.upper()\r\n+    clean_message = message.upper().replace('J', 'I')\r\n     clean_message = ''.join([char for char in clean_message if char.isalpha()])\r\n \r\n     # Playfair Cipher typically appends 'X' to complete the final digram if the initial message has an odd number of chars\r\n     if len(clean_message) % 2 != 0:\r\n@@ -68,9 +68,9 @@\n     decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n     return decrypted\r\n \r\n def main():\r\n-    message = \"IPOTMQOCEZSDXNSQB!KNXDUSCMECQHOIV\"\r\n+    message = \"JPOTMQOCEZSDXNSQB!KNXDUSCMECQHOJV\"\r\n     key = \"SUPERSPY\"\r\n     \r\n     grid = generate_grid(key)\r\n     # grid = [\r\n"
                },
                {
                    "date": 1719538725753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n \r\n def generate_grid(key):\r\n     alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\" # Omit 'J'\r\n     key = key.upper().replace('J', 'I')\r\n+    key = ''.join([char for char in key if char.isalpha()])\r\n     key_grid = []\r\n     \r\n     for char in key:\r\n         if char not in key_grid:\r\n"
                },
                {
                    "date": 1719538751269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n     decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n     return decrypted\r\n \r\n def main():\r\n-    message = \"JPOTMQOCEZSDXNSQB!KNXDUSCMECQHOJV\"\r\n+    message = \"IPOTMQOCEZSDXNSQB!KNXDUSCMECQHOIV\"\r\n     key = \"SUPERSPY\"\r\n     \r\n     grid = generate_grid(key)\r\n     # grid = [\r\n"
                },
                {
                    "date": 1719539391207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,84 @@\n+#!/usr/bin/env python3\r\n+\r\n+def generate_grid(key):\r\n+    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\" # Omit 'J'\r\n+    key = key.upper().replace('J', 'I')\r\n+    key = ''.join([char for char in key if char.isalpha()])\r\n+    key_grid = []\r\n+    \r\n+    for char in key:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    for char in alphabet:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n+    \r\n+    return grid\r\n+\r\n+def sanitize(s):\r\n+    clean_string = s.upper().replace('J', 'I')\r\n+    clean_string = ''.join([char for char in clean_string if char.isalpha()])\r\n+    return clean_string\r\n+\r\n+def decrypt_message(message, grid):\r\n+    decrypted = \"\"\r\n+\r\n+    message = sanitize(message) # Clean message to avoid errors\r\n+\r\n+    # Constraints: remove 'X', remove special chars, remove spaces\r\n+    # Edgecases: must wrap around edges if necessary\r\n+\r\n+    for digraph_point in range(0, len(message), 2):\r\n+        letter1, letter2 = message[digraph_point], message[digraph_point+1]\r\n+\r\n+        letter1_row = -1\r\n+        letter1_col = -1\r\n+        letter2_row = -1\r\n+        letter2_col = -1\r\n+        \r\n+        for rIndex, row in enumerate(grid):\r\n+            if letter1 in row:\r\n+                letter1_row = rIndex\r\n+                letter1_col = row.index(letter1)\r\n+            if letter2 in row:\r\n+                letter2_row = rIndex\r\n+                letter2_col = row.index(letter2)\r\n+        \r\n+        if letter1_row == letter2_row:\r\n+            # print(f\"Same row: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][(letter1_col-1) % len(row)] + grid[letter2_row][(letter2_col-1) % len(row)] # Implemented wrap logic although technically not necessary with negative indexing\r\n+            decrypted += decrypted_digraph\r\n+        elif letter1_col == letter2_col:\r\n+            # print(f\"Same column: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[(letter1_row-1) % len(grid)][letter1_col] + grid[(letter2_row-1) % len(grid)][letter2_col] # Implemented wrap logic although technically not necessary with negative indexing\r\n+            decrypted += decrypted_digraph\r\n+        else:\r\n+            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n+            decrypted += decrypted_digraph\r\n+            \r\n+    decrypted = decrypted.replace(\"X\", \"\")\r\n+    decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n+    return decrypted\r\n+\r\n+def main():\r\n+    message = \"IPOTMQOCEZSDXNSQB!KNXDUSCMECQHOIV\"\r\n+    key = \"SUPERSPY\"\r\n+    \r\n+    grid = generate_grid(key)\r\n+    # grid = [\r\n+    #     ['S','U','P','E','R'],\r\n+    #     ['Y','A','B','C','D'],\r\n+    #     ['F','G','H','I','K'],\r\n+    #     ['L','M','N','O','Q'],\r\n+    #     ['T','V','W','X','Z']\r\n+    # ]\r\n+    \r\n+    decrypted_message = decrypt_message(message, grid)\r\n+    print(decrypted_message)\r\n+    return decrypted_message\r\n+\r\n+main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719539466405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,85 @@\n+#!/usr/bin/env python3\r\n+\r\n+def sanitize(s):\r\n+    if not isinstance(s, str) or not s:\r\n+        raise ValueError(\"Input must be a non-empty string.\")\r\n+    clean_string = s.upper().replace('J', 'I')\r\n+    clean_string = ''.join([char for char in clean_string if char.isalpha()])\r\n+    return clean_string\r\n+\r\n+def generate_grid(key):\r\n+    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\" # Omit 'J'\r\n+    key = sanitize(key)\r\n+    key_grid = []\r\n+    \r\n+    for char in key:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    for char in alphabet:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n+    \r\n+    return grid\r\n+\r\n+def decrypt_message(message, grid):\r\n+    decrypted = \"\"\r\n+\r\n+    message = sanitize(message) # Clean message to avoid errors\r\n+\r\n+    # Constraints: remove 'X', remove special chars, remove spaces\r\n+    # Edgecases: must wrap around edges if necessary\r\n+\r\n+    for digraph_point in range(0, len(message), 2):\r\n+        letter1, letter2 = message[digraph_point], message[digraph_point+1]\r\n+\r\n+        letter1_row = -1\r\n+        letter1_col = -1\r\n+        letter2_row = -1\r\n+        letter2_col = -1\r\n+        \r\n+        for rIndex, row in enumerate(grid):\r\n+            if letter1 in row:\r\n+                letter1_row = rIndex\r\n+                letter1_col = row.index(letter1)\r\n+            if letter2 in row:\r\n+                letter2_row = rIndex\r\n+                letter2_col = row.index(letter2)\r\n+        \r\n+        if letter1_row == letter2_row:\r\n+            # print(f\"Same row: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][(letter1_col-1) % len(row)] + grid[letter2_row][(letter2_col-1) % len(row)] # Implemented wrap logic although technically not necessary with negative indexing\r\n+            decrypted += decrypted_digraph\r\n+        elif letter1_col == letter2_col:\r\n+            # print(f\"Same column: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[(letter1_row-1) % len(grid)][letter1_col] + grid[(letter2_row-1) % len(grid)][letter2_col] # Implemented wrap logic although technically not necessary with negative indexing\r\n+            decrypted += decrypted_digraph\r\n+        else:\r\n+            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n+            decrypted += decrypted_digraph\r\n+            \r\n+    decrypted = decrypted.replace(\"X\", \"\")\r\n+    decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n+    return decrypted\r\n+\r\n+def main():\r\n+    message = \"IPOTMQOCEZSDXNSQB!KNXDUSCMECQHOIV\"\r\n+    key = \"SUPERSPY\"\r\n+    \r\n+    grid = generate_grid(key)\r\n+    # grid = [\r\n+    #     ['S','U','P','E','R'],\r\n+    #     ['Y','A','B','C','D'],\r\n+    #     ['F','G','H','I','K'],\r\n+    #     ['L','M','N','O','Q'],\r\n+    #     ['T','V','W','X','Z']\r\n+    # ]\r\n+    \r\n+    decrypted_message = decrypt_message(message, grid)\r\n+    print(decrypted_message)\r\n+    return decrypted_message\r\n+\r\n+main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719539474970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,87 @@\n+#!/usr/bin/env python3\r\n+\r\n+def sanitize(s):\r\n+    if not isinstance(s, str) or not s:\r\n+        raise ValueError(\"Input must be a non-empty string.\")\r\n+    \r\n+    clean_string = s.upper().replace('J', 'I')\r\n+    clean_string = ''.join([char for char in clean_string if char.isalpha()])\r\n+    \r\n+    return clean_string\r\n+\r\n+def generate_grid(key):\r\n+    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\" # Omit 'J'\r\n+    key = sanitize(key)\r\n+    key_grid = []\r\n+    \r\n+    for char in key:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    for char in alphabet:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n+    \r\n+    return grid\r\n+\r\n+def decrypt_message(message, grid):\r\n+    decrypted = \"\"\r\n+\r\n+    message = sanitize(message) # Clean message to avoid errors\r\n+\r\n+    # Constraints: remove 'X', remove special chars, remove spaces\r\n+    # Edgecases: must wrap around edges if necessary\r\n+\r\n+    for digraph_point in range(0, len(message), 2):\r\n+        letter1, letter2 = message[digraph_point], message[digraph_point+1]\r\n+\r\n+        letter1_row = -1\r\n+        letter1_col = -1\r\n+        letter2_row = -1\r\n+        letter2_col = -1\r\n+        \r\n+        for rIndex, row in enumerate(grid):\r\n+            if letter1 in row:\r\n+                letter1_row = rIndex\r\n+                letter1_col = row.index(letter1)\r\n+            if letter2 in row:\r\n+                letter2_row = rIndex\r\n+                letter2_col = row.index(letter2)\r\n+        \r\n+        if letter1_row == letter2_row:\r\n+            # print(f\"Same row: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][(letter1_col-1) % len(row)] + grid[letter2_row][(letter2_col-1) % len(row)] # Implemented wrap logic although technically not necessary with negative indexing\r\n+            decrypted += decrypted_digraph\r\n+        elif letter1_col == letter2_col:\r\n+            # print(f\"Same column: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[(letter1_row-1) % len(grid)][letter1_col] + grid[(letter2_row-1) % len(grid)][letter2_col] # Implemented wrap logic although technically not necessary with negative indexing\r\n+            decrypted += decrypted_digraph\r\n+        else:\r\n+            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n+            decrypted += decrypted_digraph\r\n+            \r\n+    decrypted = decrypted.replace(\"X\", \"\")\r\n+    decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n+    return decrypted\r\n+\r\n+def main():\r\n+    message = \"IPOTMQOCEZSDXNSQB!KNXDUSCMECQHOIV\"\r\n+    key = \"SUPERSPY\"\r\n+    \r\n+    grid = generate_grid(key)\r\n+    # grid = [\r\n+    #     ['S','U','P','E','R'],\r\n+    #     ['Y','A','B','C','D'],\r\n+    #     ['F','G','H','I','K'],\r\n+    #     ['L','M','N','O','Q'],\r\n+    #     ['T','V','W','X','Z']\r\n+    # ]\r\n+    \r\n+    decrypted_message = decrypt_message(message, grid)\r\n+    print(decrypted_message)\r\n+    return decrypted_message\r\n+\r\n+main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719539502295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n     decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n     return decrypted\r\n \r\n def main():\r\n-    message = \"IPOTMQOCEZSDXNSQB!KNXDUSCMECQHOIV\"\r\n+    message = \"HIPPOPOTOMONSTROSESQUIPPEDALIOPHOBIA\"\r\n     key = \"SUPERSPY\"\r\n     \r\n     grid = generate_grid(key)\r\n     # grid = [\r\n@@ -83,263 +83,5 @@\n     decrypted_message = decrypt_message(message, grid)\r\n     print(decrypted_message)\r\n     return decrypted_message\r\n \r\n-main()\n-#!/usr/bin/env python3\r\n-\r\n-def sanitize(s):\r\n-    if not isinstance(s, str) or not s:\r\n-        raise ValueError(\"Input must be a non-empty string.\")\r\n-    clean_string = s.upper().replace('J', 'I')\r\n-    clean_string = ''.join([char for char in clean_string if char.isalpha()])\r\n-    return clean_string\r\n-\r\n-def generate_grid(key):\r\n-    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\" # Omit 'J'\r\n-    key = sanitize(key)\r\n-    key_grid = []\r\n-    \r\n-    for char in key:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    for char in alphabet:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n-    \r\n-    return grid\r\n-\r\n-def decrypt_message(message, grid):\r\n-    decrypted = \"\"\r\n-\r\n-    message = sanitize(message) # Clean message to avoid errors\r\n-\r\n-    # Constraints: remove 'X', remove special chars, remove spaces\r\n-    # Edgecases: must wrap around edges if necessary\r\n-\r\n-    for digraph_point in range(0, len(message), 2):\r\n-        letter1, letter2 = message[digraph_point], message[digraph_point+1]\r\n-\r\n-        letter1_row = -1\r\n-        letter1_col = -1\r\n-        letter2_row = -1\r\n-        letter2_col = -1\r\n-        \r\n-        for rIndex, row in enumerate(grid):\r\n-            if letter1 in row:\r\n-                letter1_row = rIndex\r\n-                letter1_col = row.index(letter1)\r\n-            if letter2 in row:\r\n-                letter2_row = rIndex\r\n-                letter2_col = row.index(letter2)\r\n-        \r\n-        if letter1_row == letter2_row:\r\n-            # print(f\"Same row: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][(letter1_col-1) % len(row)] + grid[letter2_row][(letter2_col-1) % len(row)] # Implemented wrap logic although technically not necessary with negative indexing\r\n-            decrypted += decrypted_digraph\r\n-        elif letter1_col == letter2_col:\r\n-            # print(f\"Same column: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[(letter1_row-1) % len(grid)][letter1_col] + grid[(letter2_row-1) % len(grid)][letter2_col] # Implemented wrap logic although technically not necessary with negative indexing\r\n-            decrypted += decrypted_digraph\r\n-        else:\r\n-            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n-            decrypted += decrypted_digraph\r\n-            \r\n-    decrypted = decrypted.replace(\"X\", \"\")\r\n-    decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n-    return decrypted\r\n-\r\n-def main():\r\n-    message = \"IPOTMQOCEZSDXNSQB!KNXDUSCMECQHOIV\"\r\n-    key = \"SUPERSPY\"\r\n-    \r\n-    grid = generate_grid(key)\r\n-    # grid = [\r\n-    #     ['S','U','P','E','R'],\r\n-    #     ['Y','A','B','C','D'],\r\n-    #     ['F','G','H','I','K'],\r\n-    #     ['L','M','N','O','Q'],\r\n-    #     ['T','V','W','X','Z']\r\n-    # ]\r\n-    \r\n-    decrypted_message = decrypt_message(message, grid)\r\n-    print(decrypted_message)\r\n-    return decrypted_message\r\n-\r\n-main()\n-#!/usr/bin/env python3\r\n-\r\n-def generate_grid(key):\r\n-    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\" # Omit 'J'\r\n-    key = key.upper().replace('J', 'I')\r\n-    key = ''.join([char for char in key if char.isalpha()])\r\n-    key_grid = []\r\n-    \r\n-    for char in key:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    for char in alphabet:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n-    \r\n-    return grid\r\n-\r\n-def sanitize(s):\r\n-    clean_string = s.upper().replace('J', 'I')\r\n-    clean_string = ''.join([char for char in clean_string if char.isalpha()])\r\n-    return clean_string\r\n-\r\n-def decrypt_message(message, grid):\r\n-    decrypted = \"\"\r\n-\r\n-    message = sanitize(message) # Clean message to avoid errors\r\n-\r\n-    # Constraints: remove 'X', remove special chars, remove spaces\r\n-    # Edgecases: must wrap around edges if necessary\r\n-\r\n-    for digraph_point in range(0, len(message), 2):\r\n-        letter1, letter2 = message[digraph_point], message[digraph_point+1]\r\n-\r\n-        letter1_row = -1\r\n-        letter1_col = -1\r\n-        letter2_row = -1\r\n-        letter2_col = -1\r\n-        \r\n-        for rIndex, row in enumerate(grid):\r\n-            if letter1 in row:\r\n-                letter1_row = rIndex\r\n-                letter1_col = row.index(letter1)\r\n-            if letter2 in row:\r\n-                letter2_row = rIndex\r\n-                letter2_col = row.index(letter2)\r\n-        \r\n-        if letter1_row == letter2_row:\r\n-            # print(f\"Same row: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][(letter1_col-1) % len(row)] + grid[letter2_row][(letter2_col-1) % len(row)] # Implemented wrap logic although technically not necessary with negative indexing\r\n-            decrypted += decrypted_digraph\r\n-        elif letter1_col == letter2_col:\r\n-            # print(f\"Same column: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[(letter1_row-1) % len(grid)][letter1_col] + grid[(letter2_row-1) % len(grid)][letter2_col] # Implemented wrap logic although technically not necessary with negative indexing\r\n-            decrypted += decrypted_digraph\r\n-        else:\r\n-            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n-            decrypted += decrypted_digraph\r\n-            \r\n-    decrypted = decrypted.replace(\"X\", \"\")\r\n-    decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n-    return decrypted\r\n-\r\n-def main():\r\n-    message = \"IPOTMQOCEZSDXNSQB!KNXDUSCMECQHOIV\"\r\n-    key = \"SUPERSPY\"\r\n-    \r\n-    grid = generate_grid(key)\r\n-    # grid = [\r\n-    #     ['S','U','P','E','R'],\r\n-    #     ['Y','A','B','C','D'],\r\n-    #     ['F','G','H','I','K'],\r\n-    #     ['L','M','N','O','Q'],\r\n-    #     ['T','V','W','X','Z']\r\n-    # ]\r\n-    \r\n-    decrypted_message = decrypt_message(message, grid)\r\n-    print(decrypted_message)\r\n-    return decrypted_message\r\n-\r\n-main()\n-#!/usr/bin/env python3\r\n-\r\n-def generate_grid(key):\r\n-    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\" # Omit 'J'\r\n-    key = key.upper().replace('J', 'I')\r\n-    key = ''.join([char for char in key if char.isalpha()])\r\n-    key_grid = []\r\n-    \r\n-    for char in key:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    for char in alphabet:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n-    \r\n-    return grid\r\n-\r\n-def prepare_message(message):\r\n-    clean_message = message.upper().replace('J', 'I')\r\n-    clean_message = ''.join([char for char in clean_message if char.isalpha()])\r\n-\r\n-    # Playfair Cipher typically appends 'X' to complete the final digram if the initial message has an odd number of chars\r\n-    if len(clean_message) % 2 != 0:\r\n-        clean_message += 'X'\r\n-\r\n-    return clean_message\r\n-\r\n-def decrypt_message(message, grid):\r\n-    decrypted = \"\"\r\n-\r\n-    message = prepare_message(message) # Clean message to avoid errors\r\n-\r\n-    # Constraints: remove 'X', remove special chars, remove spaces\r\n-    # Edgecases: must wrap around edges if necessary\r\n-\r\n-    for digraph_point in range(0, len(message), 2):\r\n-        letter1, letter2 = message[digraph_point], message[digraph_point+1]\r\n-\r\n-        letter1_row = -1\r\n-        letter1_col = -1\r\n-        letter2_row = -1\r\n-        letter2_col = -1\r\n-        \r\n-        for rIndex, row in enumerate(grid):\r\n-            if letter1 in row:\r\n-                letter1_row = rIndex\r\n-                letter1_col = row.index(letter1)\r\n-            if letter2 in row:\r\n-                letter2_row = rIndex\r\n-                letter2_col = row.index(letter2)\r\n-        \r\n-        if letter1_row == letter2_row:\r\n-            # print(f\"Same row: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][(letter1_col-1) % len(row)] + grid[letter2_row][(letter2_col-1) % len(row)] # Implemented wrap logic although technically not necessary with negative indexing\r\n-            decrypted += decrypted_digraph\r\n-        elif letter1_col == letter2_col:\r\n-            # print(f\"Same column: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[(letter1_row-1) % len(grid)][letter1_col] + grid[(letter2_row-1) % len(grid)][letter2_col] # Implemented wrap logic although technically not necessary with negative indexing\r\n-            decrypted += decrypted_digraph\r\n-        else:\r\n-            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n-            decrypted += decrypted_digraph\r\n-            \r\n-    decrypted = decrypted.replace(\"X\", \"\")\r\n-    decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n-    return decrypted\r\n-\r\n-def main():\r\n-    message = \"IPOTMQOCEZSDXNSQB!KNXDUSCMECQHOIV\"\r\n-    key = \"SUPERSPY\"\r\n-    \r\n-    grid = generate_grid(key)\r\n-    # grid = [\r\n-    #     ['S','U','P','E','R'],\r\n-    #     ['Y','A','B','C','D'],\r\n-    #     ['F','G','H','I','K'],\r\n-    #     ['L','M','N','O','Q'],\r\n-    #     ['T','V','W','X','Z']\r\n-    # ]\r\n-    \r\n-    decrypted_message = decrypt_message(message, grid)\r\n-    print(decrypted_message)\r\n-    return decrypted_message\r\n-\r\n main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719539545823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n     decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n     return decrypted\r\n \r\n def main():\r\n-    message = \"HIPPOPOTOMONSTROSESQUIPPEDALIOPHOBIA\"\r\n+    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n     key = \"SUPERSPY\"\r\n     \r\n     grid = generate_grid(key)\r\n     # grid = [\r\n"
                },
                {
                    "date": 1719539567765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n     decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n     return decrypted\r\n \r\n def main():\r\n-    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+    message = \"\"\r\n     key = \"SUPERSPY\"\r\n     \r\n     grid = generate_grid(key)\r\n     # grid = [\r\n"
                },
                {
                    "date": 1719539583298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n     decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n     return decrypted\r\n \r\n def main():\r\n-    message = \"\"\r\n+    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n     key = \"SUPERSPY\"\r\n     \r\n     grid = generate_grid(key)\r\n     # grid = [\r\n"
                },
                {
                    "date": 1719539673353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n     return decrypted\r\n \r\n def main():\r\n     message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-    key = \"SUPERSPY\"\r\n+    key = \"!@$$$\"\r\n     \r\n     grid = generate_grid(key)\r\n     # grid = [\r\n     #     ['S','U','P','E','R'],\r\n"
                },
                {
                    "date": 1719539698049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,87 @@\n+#!/usr/bin/env python3\r\n+\r\n+def sanitize(s):\r\n+    if not isinstance(s, str) or not s:\r\n+        raise ValueError(\"Input must be a non-empty string.\")\r\n+    \r\n+    clean_string = s.upper().replace('J', 'I')\r\n+    clean_string = ''.join([char for char in clean_string if char.isalpha()])\r\n+    \r\n+    return clean_string\r\n+\r\n+def generate_grid(key):\r\n+    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\" # Omit 'J'\r\n+    key = sanitize(key)\r\n+    key_grid = []\r\n+    \r\n+    for char in key:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    for char in alphabet:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n+    \r\n+    return grid\r\n+\r\n+def decrypt_message(message, grid):\r\n+    decrypted = \"\"\r\n+\r\n+    message = sanitize(message) # Clean message to avoid errors\r\n+\r\n+    # Constraints: remove 'X', remove special chars, remove spaces\r\n+    # Edgecases: must wrap around edges if necessary\r\n+\r\n+    for digraph_point in range(0, len(message), 2):\r\n+        letter1, letter2 = message[digraph_point], message[digraph_point+1]\r\n+\r\n+        letter1_row = -1\r\n+        letter1_col = -1\r\n+        letter2_row = -1\r\n+        letter2_col = -1\r\n+        \r\n+        for rIndex, row in enumerate(grid):\r\n+            if letter1 in row:\r\n+                letter1_row = rIndex\r\n+                letter1_col = row.index(letter1)\r\n+            if letter2 in row:\r\n+                letter2_row = rIndex\r\n+                letter2_col = row.index(letter2)\r\n+        \r\n+        if letter1_row == letter2_row:\r\n+            # print(f\"Same row: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][(letter1_col-1) % len(row)] + grid[letter2_row][(letter2_col-1) % len(row)] # Implemented wrap logic although technically not necessary with negative indexing\r\n+            decrypted += decrypted_digraph\r\n+        elif letter1_col == letter2_col:\r\n+            # print(f\"Same column: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[(letter1_row-1) % len(grid)][letter1_col] + grid[(letter2_row-1) % len(grid)][letter2_col] # Implemented wrap logic although technically not necessary with negative indexing\r\n+            decrypted += decrypted_digraph\r\n+        else:\r\n+            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n+            decrypted += decrypted_digraph\r\n+            \r\n+    decrypted = decrypted.replace(\"X\", \"\")\r\n+    decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n+    return decrypted\r\n+\r\n+def main():\r\n+    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+    key = \"SUPERSPY\"\r\n+    \r\n+    grid = generate_grid(key)\r\n+    # grid = [\r\n+    #     ['S','U','P','E','R'],\r\n+    #     ['Y','A','B','C','D'],\r\n+    #     ['F','G','H','I','K'],\r\n+    #     ['L','M','N','O','Q'],\r\n+    #     ['T','V','W','X','Z']\r\n+    # ]\r\n+    \r\n+    decrypted_message = decrypt_message(message, grid)\r\n+    print(decrypted_message)\r\n+    return decrypted_message\r\n+\r\n+main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719539720975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,88 @@\n+#!/usr/bin/env python3\r\n+\r\n+def sanitize(s):\r\n+    if not isinstance(s, str) or not s:\r\n+        raise ValueError(\"Input must be a non-empty string.\")\r\n+    \r\n+    clean_string = s.upper().replace('J', 'I')\r\n+    clean_string = ''.join([char for char in clean_string if char.isalpha()])\r\n+    \r\n+    return clean_string\r\n+\r\n+def generate_grid(key):\r\n+    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\" # Omit 'J'\r\n+    key = sanitize(key)\r\n+    print(key)\r\n+    key_grid = []\r\n+    \r\n+    for char in key:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    for char in alphabet:\r\n+        if char not in key_grid:\r\n+            key_grid.append(char)\r\n+    \r\n+    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n+    \r\n+    return grid\r\n+\r\n+def decrypt_message(message, grid):\r\n+    decrypted = \"\"\r\n+\r\n+    message = sanitize(message) # Clean message to avoid errors\r\n+\r\n+    # Constraints: remove 'X', remove special chars, remove spaces\r\n+    # Edgecases: must wrap around edges if necessary\r\n+\r\n+    for digraph_point in range(0, len(message), 2):\r\n+        letter1, letter2 = message[digraph_point], message[digraph_point+1]\r\n+\r\n+        letter1_row = -1\r\n+        letter1_col = -1\r\n+        letter2_row = -1\r\n+        letter2_col = -1\r\n+        \r\n+        for rIndex, row in enumerate(grid):\r\n+            if letter1 in row:\r\n+                letter1_row = rIndex\r\n+                letter1_col = row.index(letter1)\r\n+            if letter2 in row:\r\n+                letter2_row = rIndex\r\n+                letter2_col = row.index(letter2)\r\n+        \r\n+        if letter1_row == letter2_row:\r\n+            # print(f\"Same row: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][(letter1_col-1) % len(row)] + grid[letter2_row][(letter2_col-1) % len(row)] # Implemented wrap logic although technically not necessary with negative indexing\r\n+            decrypted += decrypted_digraph\r\n+        elif letter1_col == letter2_col:\r\n+            # print(f\"Same column: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[(letter1_row-1) % len(grid)][letter1_col] + grid[(letter2_row-1) % len(grid)][letter2_col] # Implemented wrap logic although technically not necessary with negative indexing\r\n+            decrypted += decrypted_digraph\r\n+        else:\r\n+            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n+            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n+            decrypted += decrypted_digraph\r\n+            \r\n+    decrypted = decrypted.replace(\"X\", \"\")\r\n+    decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n+    return decrypted\r\n+\r\n+def main():\r\n+    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n+    key = \"!@$$$\"\r\n+    \r\n+    grid = generate_grid(key)\r\n+    # grid = [\r\n+    #     ['S','U','P','E','R'],\r\n+    #     ['Y','A','B','C','D'],\r\n+    #     ['F','G','H','I','K'],\r\n+    #     ['L','M','N','O','Q'],\r\n+    #     ['T','V','W','X','Z']\r\n+    # ]\r\n+    \r\n+    decrypted_message = decrypt_message(message, grid)\r\n+    print(decrypted_message)\r\n+    return decrypted_message\r\n+\r\n+main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719539756753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n     return decrypted\r\n \r\n def main():\r\n     message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-    key = \"!@$$$\"\r\n+    key = \"SUPERSPY\"\r\n     \r\n     grid = generate_grid(key)\r\n     # grid = [\r\n     #     ['S','U','P','E','R'],\r\n"
                },
                {
                    "date": 1719539790776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,11 @@\n         raise ValueError(\"Input must be a non-empty string.\")\r\n     \r\n     clean_string = s.upper().replace('J', 'I')\r\n     clean_string = ''.join([char for char in clean_string if char.isalpha()])\r\n+\r\n+    if not s:\r\n+        raise ValueError(\"Not enough valid characters in input.\")\r\n     \r\n     return clean_string\r\n \r\n def generate_grid(key):\r\n@@ -84,179 +87,5 @@\n     decrypted_message = decrypt_message(message, grid)\r\n     print(decrypted_message)\r\n     return decrypted_message\r\n \r\n-main()\n-#!/usr/bin/env python3\r\n-\r\n-def sanitize(s):\r\n-    if not isinstance(s, str) or not s:\r\n-        raise ValueError(\"Input must be a non-empty string.\")\r\n-    \r\n-    clean_string = s.upper().replace('J', 'I')\r\n-    clean_string = ''.join([char for char in clean_string if char.isalpha()])\r\n-    \r\n-    return clean_string\r\n-\r\n-def generate_grid(key):\r\n-    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\" # Omit 'J'\r\n-    key = sanitize(key)\r\n-    key_grid = []\r\n-    \r\n-    for char in key:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    for char in alphabet:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n-    \r\n-    return grid\r\n-\r\n-def decrypt_message(message, grid):\r\n-    decrypted = \"\"\r\n-\r\n-    message = sanitize(message) # Clean message to avoid errors\r\n-\r\n-    # Constraints: remove 'X', remove special chars, remove spaces\r\n-    # Edgecases: must wrap around edges if necessary\r\n-\r\n-    for digraph_point in range(0, len(message), 2):\r\n-        letter1, letter2 = message[digraph_point], message[digraph_point+1]\r\n-\r\n-        letter1_row = -1\r\n-        letter1_col = -1\r\n-        letter2_row = -1\r\n-        letter2_col = -1\r\n-        \r\n-        for rIndex, row in enumerate(grid):\r\n-            if letter1 in row:\r\n-                letter1_row = rIndex\r\n-                letter1_col = row.index(letter1)\r\n-            if letter2 in row:\r\n-                letter2_row = rIndex\r\n-                letter2_col = row.index(letter2)\r\n-        \r\n-        if letter1_row == letter2_row:\r\n-            # print(f\"Same row: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][(letter1_col-1) % len(row)] + grid[letter2_row][(letter2_col-1) % len(row)] # Implemented wrap logic although technically not necessary with negative indexing\r\n-            decrypted += decrypted_digraph\r\n-        elif letter1_col == letter2_col:\r\n-            # print(f\"Same column: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[(letter1_row-1) % len(grid)][letter1_col] + grid[(letter2_row-1) % len(grid)][letter2_col] # Implemented wrap logic although technically not necessary with negative indexing\r\n-            decrypted += decrypted_digraph\r\n-        else:\r\n-            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n-            decrypted += decrypted_digraph\r\n-            \r\n-    decrypted = decrypted.replace(\"X\", \"\")\r\n-    decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n-    return decrypted\r\n-\r\n-def main():\r\n-    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-    key = \"SUPERSPY\"\r\n-    \r\n-    grid = generate_grid(key)\r\n-    # grid = [\r\n-    #     ['S','U','P','E','R'],\r\n-    #     ['Y','A','B','C','D'],\r\n-    #     ['F','G','H','I','K'],\r\n-    #     ['L','M','N','O','Q'],\r\n-    #     ['T','V','W','X','Z']\r\n-    # ]\r\n-    \r\n-    decrypted_message = decrypt_message(message, grid)\r\n-    print(decrypted_message)\r\n-    return decrypted_message\r\n-\r\n-main()\n-#!/usr/bin/env python3\r\n-\r\n-def sanitize(s):\r\n-    if not isinstance(s, str) or not s:\r\n-        raise ValueError(\"Input must be a non-empty string.\")\r\n-    \r\n-    clean_string = s.upper().replace('J', 'I')\r\n-    clean_string = ''.join([char for char in clean_string if char.isalpha()])\r\n-    \r\n-    return clean_string\r\n-\r\n-def generate_grid(key):\r\n-    alphabet = \"ABCDEFGHIKLMNOPQRSTUVWXYZ\" # Omit 'J'\r\n-    key = sanitize(key)\r\n-    key_grid = []\r\n-    \r\n-    for char in key:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    for char in alphabet:\r\n-        if char not in key_grid:\r\n-            key_grid.append(char)\r\n-    \r\n-    grid = [key_grid[i:i+5] for i in range(0, len(key_grid), 5)]\r\n-    \r\n-    return grid\r\n-\r\n-def decrypt_message(message, grid):\r\n-    decrypted = \"\"\r\n-\r\n-    message = sanitize(message) # Clean message to avoid errors\r\n-\r\n-    # Constraints: remove 'X', remove special chars, remove spaces\r\n-    # Edgecases: must wrap around edges if necessary\r\n-\r\n-    for digraph_point in range(0, len(message), 2):\r\n-        letter1, letter2 = message[digraph_point], message[digraph_point+1]\r\n-\r\n-        letter1_row = -1\r\n-        letter1_col = -1\r\n-        letter2_row = -1\r\n-        letter2_col = -1\r\n-        \r\n-        for rIndex, row in enumerate(grid):\r\n-            if letter1 in row:\r\n-                letter1_row = rIndex\r\n-                letter1_col = row.index(letter1)\r\n-            if letter2 in row:\r\n-                letter2_row = rIndex\r\n-                letter2_col = row.index(letter2)\r\n-        \r\n-        if letter1_row == letter2_row:\r\n-            # print(f\"Same row: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][(letter1_col-1) % len(row)] + grid[letter2_row][(letter2_col-1) % len(row)] # Implemented wrap logic although technically not necessary with negative indexing\r\n-            decrypted += decrypted_digraph\r\n-        elif letter1_col == letter2_col:\r\n-            # print(f\"Same column: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[(letter1_row-1) % len(grid)][letter1_col] + grid[(letter2_row-1) % len(grid)][letter2_col] # Implemented wrap logic although technically not necessary with negative indexing\r\n-            decrypted += decrypted_digraph\r\n-        else:\r\n-            # print(f\"Rectangle: {letter1} and {letter2}\")\r\n-            decrypted_digraph = grid[letter1_row][letter2_col] + grid[letter2_row][letter1_col]\r\n-            decrypted += decrypted_digraph\r\n-            \r\n-    decrypted = decrypted.replace(\"X\", \"\")\r\n-    decrypted = ''.join([char for char in decrypted if char.isalpha()])\r\n-    return decrypted\r\n-\r\n-def main():\r\n-    message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-    key = \"!@$$$\"\r\n-    \r\n-    grid = generate_grid(key)\r\n-    # grid = [\r\n-    #     ['S','U','P','E','R'],\r\n-    #     ['Y','A','B','C','D'],\r\n-    #     ['F','G','H','I','K'],\r\n-    #     ['L','M','N','O','Q'],\r\n-    #     ['T','V','W','X','Z']\r\n-    # ]\r\n-    \r\n-    decrypted_message = decrypt_message(message, grid)\r\n-    print(decrypted_message)\r\n-    return decrypted_message\r\n-\r\n main()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1719539796051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n     \r\n     clean_string = s.upper().replace('J', 'I')\r\n     clean_string = ''.join([char for char in clean_string if char.isalpha()])\r\n \r\n-    if not s:\r\n+    if not clean_string:\r\n         raise ValueError(\"Not enough valid characters in input.\")\r\n     \r\n     return clean_string\r\n \r\n"
                },
                {
                    "date": 1719539811362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n     return decrypted\r\n \r\n def main():\r\n     message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-    key = \"SUPERSPY\"\r\n+    key = \"!@#$\"\r\n     \r\n     grid = generate_grid(key)\r\n     # grid = [\r\n     #     ['S','U','P','E','R'],\r\n"
                },
                {
                    "date": 1719539826147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n     return decrypted\r\n \r\n def main():\r\n     message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n-    key = \"!@#$\"\r\n+    key = \"SUPERSPY\"\r\n     \r\n     grid = generate_grid(key)\r\n     # grid = [\r\n     #     ['S','U','P','E','R'],\r\n"
                }
            ],
            "date": 1719521097872,
            "name": "Commit-0",
            "content": "message = \"IKEWENENXLNQLPZSLERUMRHEERYBOFNEINCHCV\"\r\n\r\ngrid = [\r\n    ['S','U','P','E','R'],\r\n    ['Y','A','B','C','D'],\r\n    ['F','G','H','I','K'],\r\n    ['L','M','N','O','Q'],\r\n    ['T','V','W','X','Z']\r\n]\r\n\r\nfor digraph in range(0, len(message), 2):\r\n    print(digraph)"
        }
    ]
}